{
	"05ab1e": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/Adriandmen/05AB1E",
		"name": "05AB1E",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"2sable": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/Adriandmen/2sable",
		"name": "2sable",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"3var": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://esolangs.org/wiki/3var",
		"name": "3var",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "iisssaa/>emaa->e#aamam->e#dddddddddddddddddddddddddPiiiiiiiiiiiiiiiiiiiiiiiiiiiiiPiiiiiiiPPiiiPriissaa*>iiiiiiiiiiiiPriisaamaaaa*>Priisssaa/>emaa->e#aamam->e#ddddddddddPiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiddddddddPiiiPddddddPddddddddPriissaa*>iP"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"4": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/urielieli/py-four",
		"name": "4",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "3.6000160103602136033260433605446067260787008070200908000120902111120111011015065095105105115055035075115125105085044"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"7": {
		"categories": [
			"recreational"
		],
		"encoding": "it's complicated",
		"link": "https://esolangs.org/wiki/7",
		"name": "7",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "5325101303040432004513151401430134321027403"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"99": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/99",
		"name": "99",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "999 9 9\n99 99999999 999 9\n99\n99 99999 9 999 9\n99\n99 99 999 999999\n99\n99\n99 9999999 9999 999 9\n99\n99 99 9999999 9 999 9 999 9 999 9\n99\n99 99 999999 9 999999 9\n99\n9999\n99 99999 999 999999 999 9\n99\n99 9999999 9999 9 999 9\n99\n99 99 999999 9\n99\n99 99 999999 999 9\n99\n99 99999 9999999 9\n99"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"a-pear-tree": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki/A_Pear_Tree",
		"name": "A Pear Tree",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#r3TQJ\nprint(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"accbb": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/dloscutoff/Esolangs/tree/master/Acc!!",
		"name": "Acc!!",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "108\nWrite 72\nWrite 101\nWrite _\nWrite _\nWrite 111\nWrite 44\nWrite 32\nWrite 87\nWrite 111\nWrite 114\nWrite _\nWrite 100\nWrite 33"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"aceto": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/aceto/aceto",
		"name": "Aceto",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "o,or\nl Wl\nle!d\n\"H\"p"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"actually": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/Mego/Seriously",
		"name": "Actually",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "H"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"ada-gnat": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.gnu.org/software/gnat/",
		"name": "Ada (GNAT)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "with Ada.Text_IO;\nuse Ada.Text_IO;\n\nprocedure Main is\nbegin\n  Put_Line (\"Hello, World!\");\nend Main;"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"addpp": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cairdcoinheringaahing/AddPlusPlus",
		"name": "Add++",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "D,f,^,\"Hello, World!\"\n$f\nO"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"adjust": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/adjust",
		"name": "ADJUST",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": " ;I-      &  e$      &  m-        &  g2Ph$      &  a2$      &  n$      &  e2+-      &  g2Ph$      &  OPh$      &  m-      &  e-      &  n-\n}     AgR};      AgR};      A=AgR};         AgR};       AgR};      AgR};        AgR};         AgR};        AgR};      AgR};      AgR};      AC"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"agda": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://wiki.portal.chalmers.se/agda",
		"name": "Agda",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "open import IO\n\nmain = run (putStr \"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "no-version"
	},
	"agony": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/royvanrijn/JAgony",
		"name": "Agony",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "<[.<]$$$,{}~<~)+{~*@+{${)~*~)~)~@<-"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"aheui": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/aheui/pyaheui",
		"name": "Aheui (esotope)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "발따밤따빠받나파빠밣다빠밦다빠받타밢밢따밦다밤밣따밦밦따빠밣다파받따빠받다파빠빠밠타밣밢따아멓희 "
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"algol68g": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://jmvdveer.home.xs4all.nl/algol.html",
		"name": "ALGOL 68 (Genie)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "manual"
	},
	"alice": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/m-ender/alice",
		"name": "Alice",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "/OH!lloo /\n@\"\"edlr,W\\ "
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"aliceml": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/aliceml/aliceml",
		"name": "Alice ML",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\");\n\nval _ = OS.Process.exit(OS.Process.success);"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"alphuck": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/brainfuck",
		"name": "Alphuck",
		"piggyback": "brainfuck",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "iiciccepepceaiiiaiaiaicccsascciijceeeeeejccijjccjcejaajaajcccjeeejaajaaijcccej"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"alumin": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/Alumin",
		"name": "Alumin",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "hhdtdadhatdoddhhhgahhhhhadohhhhhhhadodohhhadoydhhgddhhdtdaaohhhhcoyhhhhhddaaaoydohhhadohhhdacdohhdtdacohhhco"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"anyfix": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/alexander-liao/anyfix",
		"name": "anyfix",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "“Hello, World!”"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"apl-dyalog": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.dyalog.com/",
		"name": "APL (Dyalog Unicode)",
		"prettify": "apl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "⎕←'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "manual"
	},
	"apl-dyalog-classic": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://www.dyalog.com/",
		"name": "APL (Dyalog Classic)",
		"prettify": "apl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "⎕←'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "manual"
	},
	"apl-ngn": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ngn/apl",
		"name": "APL (ngn-apl)",
		"prettify": "apl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "⎕←'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"arble": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TehFlaminTaco/ARBLE",
		"name": "ARBLE",
		"prettify": "lua",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"archway": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/archway",
		"name": "Archway",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.+++++++++++++++++++++++++++++.+++++++..+++.-------------------------------------------------------------------.------------.+++++++++++++++++++++++++++++++++++++++++++++++++++++++.++++++++++++++++++++++++.+++.------.--------.-------------------------------------------------------------------."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"archway2": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/archway",
		"name": "Archway2",
		"piggyback": "archway",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "                   \\\n /\n  >++>+++>+++>+<<<<-/>+>+>->+<<<<<-\\>>.>---.+++++++..+++.>>++++.------------.<-.<.+++.------.--------.>>+.\n  \\    \\\n\\++++>\n++++++++/                         /"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"arcyou": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Nazek42/arcyou",
		"name": "Arcyóu",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"arnoldc": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://lhartikk.github.io/ArnoldC/",
		"name": "ArnoldC",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "IT'S SHOWTIME\nTALK TO THE HAND \"Hello, World!\"\nYOU HAVE BEEN TERMINATED"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"asciidots": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/aaronduino/asciidots",
		"name": "AsciiDots",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ".-$\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"assembly-as": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://sourceware.org/binutils/docs/as/index.html",
		"name": "Assembly (as, x64, Linux)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ".print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"assembly-fasm": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://flatassembler.net/",
		"name": "Assembly (fasm, x64, Linux)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "format ELF executable 3\n\n_start:\n\tmov eax, 4\n\tmov ebx, 1\n\tmov ecx, msg\n\tmov edx, 13\n\tint      0x80\n\tmov eax, 1\n        mov ebx, 0\n        int 0x80\n \nmsg db \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"assembly-gcc": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://gcc.gnu.org/",
		"name": "Assembly (gcc, x64, Linux)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "SYS_write = 4\nSTDOUT = 1\n.data\nhello:\n.string \"Hello, World!\"\n.globl main\nmain:\nmovl $SYS_write,%eax\nmovl $STDOUT,%ebx\nmovl $hello,%ecx\nmovl $13,%edx\nint $0x80\nret\n"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"assembly-jwasm": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://github.com/JWasm/JWasm",
		"name": "Assembly (JWasm, x64, Linux)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ".data\noutput db \"Hello, World!\"\n\n.code\n_start:\n\tmov eax, 4\n\tmov ebx, 1\n\tlea ecx, output\n\tmov edx, 13\n\tint      80h\n\tmov eax, 1\n\tmov ebx, 0\n\tint      80h\nend _start"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"assembly-nasm": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "http://www.nasm.us/",
		"name": "Assembly (nasm, x64, Linux)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "section .text\nglobal _start\n_start:\nmov edx,len\nmov ecx,msg\nmov ebx,1\nmov eax,4\nint 0x80\nmov ebx,0\nmov eax,1\nint 0x80\nsection .data\nmsg db \"Hello, World!\",0xa\nlen equ $ - msg"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"attache": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/attache",
		"name": "Attache",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Print[\"Hello, World!\"]"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"aubergine": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki/Aubergine",
		"name": "Aubergine",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "=aA-a1=oA=bi+b1-Ab-bb:bA+B1=iBGolf by Quintopia\n!dlroW ,olleH"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"awk": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.gnu.org/software/gawk/manual/gawk.html",
		"name": "AWK",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "BEGIN{print \"Hello, World!\"}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"axo": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://esolangs.org/wiki/Axo",
		"name": "axo",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"!dlroW ,o%\n\\%#[<\"Hell<\n >( ^"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"bash": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.gnu.org/software/bash/",
		"name": "Bash",
		"prettify": "bash",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"bc": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.gnu.org/software/bc/manual/html_mono/bc.html",
		"name": "bc",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\";\n"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "version"
	},
	"beam": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ETHproductions/beam-js",
		"name": "Beam",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "'''''''''>`++++++++)@'''''''>`++++)+@+++++++@@+++@L'''''>`+++++++++)-@'''>`----)@'''''>`+++++++++++)@'''''>`+++++)-@+++@------@--------@'''''''>`---------)----@H"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"bean": {
		"categories": [
			"recreational"
		],
		"encoding": "xxd",
		"link": "https://github.com/patrickroberts/bean",
		"name": "Bean",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "00000000: 2623 8100 c8e5 ecec efac a0d7 eff2 ece4  &#..............\n00000010: 21                                       !"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"beanshell": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.beanshell.org/",
		"name": "BeanShell",
		"prettify": "java",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\");"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"beatnik": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki/Beatnik",
		"name": "Beatnik",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "K QQQQQQQG ZD XO K QQJA KD ZD XO K KG KD ZD ZD ZD XO XO K B KD ZD XO K QQQQF ZD ZD XO K QQQD XO K A Z KD XO ZD XO K B KD XO ZD XO K J Z XO K QQQB XO"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"beeswax": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/m-lohmann/BeeswaxEsolang.jl",
		"name": "Beeswax",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "_`Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"befunge": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/catseye/Befunge-93",
		"name": "Befunge-93",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"!dlroW ,olleH\">:#,_@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"befunge-93-fbbi": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/catseye/FBBI",
		"name": "Befunge-93 (FBBI)",
		"piggyback": "befunge-98",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"!dlroW ,olleH\">:#,_@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"befunge-93-mtfi": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/befunge-97-mtfi",
		"piggyback": "befunge-97-mtfi",
		"name": "Befunge-93 (MTFI)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"!dlroW ,olleH\">:#,_@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"befunge-93-pyfunge": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://pythonhosted.org/PyFunge/",
		"name": "Befunge-93 (PyFunge)",
		"piggyback": "befunge-98-pyfunge",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"!dlroW ,olleH\">:#,_@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"befunge-96-mtfi": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/befunge-97-mtfi",
		"piggyback": "befunge-97-mtfi",
		"name": "Befunge-96 (MTFI)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"i>:#,_@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"befunge-97-mtfi": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/befunge-97-mtfi",
		"name": "Befunge-97 (MTFI)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "q\"Hello, World!\"i#]:#,_@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"befunge-98": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/catseye/FBBI",
		"name": "Befunge-98 (FBBI)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"9!dlroW ,olleH\"ck,@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"befunge-98-pyfunge": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://pythonhosted.org/PyFunge/",
		"name": "Befunge-98 (PyFunge)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"9!dlroW ,olleH\"ck,@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "pip"
	},
	"bitchanger": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/bitchanger",
		"name": "BitChanger",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "<<<<<}<<<<}<<<}<<<}\n}<}}<}}<}}<}}}<}}}}<}}<<<<<<<<<<<}\n}<}}<}}<}}<}}<}}<}}}<}}<}}<<<<<<<<<<<}\n<}\n}<}}<}}<}}<}}<}}<}}<}}<}}}<<<<<<<<<<<}\n}<}}<}}<}}}<}}<}}<}}<}}}<<<<<<<<<<<}\n}<}}<}}<}}<}}<}}<}}}<<<<<<<<<}\n}<}}<}}<}}}}}<}}}}<<<<<<<<<<<}\n}<}}<}}<}}<}}}}<<<<<<<<}\n}<}}<}}<}}<}}<}}}}}<}}<<<<<<<<<<<}\n}<}}<}}<}}<}}<}}}}}<<<<<<<<<<}\n}<}}<}}<}}<}}<}}<}}<<<<<<<<}\n}<}}<}}<}}}<}}<}}<}}}<}}<<<<<<<<<<<}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"bitwise": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/aaronryank/bitwise",
		"name": "Bitwise",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "MOV 1    &1 &1\nOUT &72  1\nOUT &101 1\nOUT &108 1\nOUT &108 1\nOUT &111 1\nOUT &44  1\nOUT &32  1\nOUT &87  1\nOUT &111 1\nOUT &114 1\nOUT &108 1\nOUT &100 1\nOUT &33  1"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"blak": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/blak",
		"name": "Black (blak)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "> Hello, World!"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-e1"
							]
						}
					}
				],
				"response": "> Hello, World!"
			}
		},
		"update": "git"
	},
	"blc": {
		"categories": [
			"recreational"
		],
		"encoding": "xxd",
		"link": "https://tromp.github.io/cl/cl.html",
		"name": "Binary Lambda Calculus",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "00000000: 2a 48 65 6c 6c 6f 2c 20 57 6f 72 6c 64 21        *Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"boo": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://boo-lang.org/",
		"name": "Boo",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"boolfuck": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/boolfuck",
		"name": "Boolfuck",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ";;;+;+;;+;+;+;+;+;+;;+;;+;;;+;;+;+;;+;;;+;;+;+;;+;+;;;;+;+;;+;;;+;;+;+;+;;;;;;;+;+;;+;;;+;+;+;+;+;+;;;;+;+;;+;;+;+;;+;;;+;;;+;;+;+;;+;;;+;+;;+;;+;+;+;;;;+;+;;;+;+;+;"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"brachylog": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/JCumin/Brachylog/releases",
		"name": "Brachylog v1",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"w"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "manual"
	},
	"brachylog2": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/JCumin/Brachylog",
		"name": "Brachylog",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"w"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"braille": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://gist.github.com/threeifbywhiskey/0e98d42150eb644a3406",
		"name": "Braille",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "⠆⠄⡒⡆⡘⠀⠊⠦⢦⠗⢾⠽⠂⢢⢾⢦⢦⠮⢄"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"brain-flak": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/DJMcMayhem/Brain-Flak",
		"name": "Brain-Flak",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(((((((((((()()()()){}){}){}()))){}{}())[][][][])[][])[[]]())[[][][][][]]())([([]([])[][]{})]()()()([[]](([()()()]([([][][])](((({}()){}))){}{})))))"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-A"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"brainbash": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/ConorOBrien-Foxx/Brainbash",
		"name": "Brainbash",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "--->->->>+>+>>+[++++[>+++[>++++>-->+++<<<-]<-]<+++]>>>.>-->-.>..+>++++>+++.+>-->[>-.<<]"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"brainbool": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/brainfuck",
		"name": "brainbool",
		"piggyback": "brainfuck",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ".+.+..+.+....+..+..+.+.+.+.+..+.+..+...+..+.+..+...+..+.+....+..+.+.+..+....+.+......+.+.+.+.+...+.+..+.+....+.+...+..+.+..+..+.+..+...+..+..+.+....+.+....+."
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-B"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"brainflump": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/gunnerwolf/BrainFlump",
		"name": "BrainFlump",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.+++++++++++++++++++++++++++++.+++++++:..+++.-------------------------------------------------------------------.------------.+++++++++++++++++++++++++++++++++++++++++++++++++++++++.++++++++++++++++++++++++.+++.;.--------.-------------------------------------------------------------------."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"brainfuck": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/brainfuck",
		"name": "brainfuck",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "--<-<<+[+[<+>--->->->-<<<]>]<<--.<++++++.<<-..<<.<+.>>.>>.<<<.+++.>>.>>-.<<<+."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"braingolf": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/gunnerwolf/braingolf",
		"name": "Braingolf",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"&@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"brainhack": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/Flakheads/BrainHack",
		"name": "Brain-Flak (BrainHack)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(((((((((((()()()()){}){}){}()))){}{}())[][][][])[][])[[]]())[[][][][][]]())([([]([])[][]{})]()()()([[]](([()()()]([([][][])](((({}()){}))){}{})))))"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-A"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"brat": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/presidentbeef/brat",
		"name": "Brat",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "p \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"brian-chuck": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/m-ender/brian-chuck",
		"name": "Brian & Chuck",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "_#Jgnnq.\"Yqtnf#_{?\n#{<{>-?>--.>?"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"bubblegum": {
		"categories": [
			"recreational"
		],
		"encoding": "xxd",
		"link": "https://esolangs.org/wiki/Bubblegum",
		"name": "Bubblegum",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "0000000: 15 27 4d 50 62 a9 9a 29 6b 6d e2                 .'MPb..)km."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"bwfuckery": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cairdcoinheringaahing/Bitwise-Fuckery",
		"name": "Bitwise Fuckery",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.+++++++++++++++++++++++++++++.+++++++..+++.%++++++++++++++++++++++++++++++++++++++++++++.------------.+++++++++++++++++++++++++++++++++++++++++++++++++++++++.%.+++.------.--------.^%^&+.+"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"c-clang": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "http://clang.llvm.org/",
		"name": "C (clang)",
		"prettify": "c",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#include <stdio.h>\nint main() {\n\tputs(\"Hello, World!\");\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"c-gcc": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://gcc.gnu.org/",
		"name": "C (gcc)",
		"prettify": "c",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#include <stdio.h>\nint main() {\n\tputs(\"Hello, World!\");\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"c-tcc": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "http://savannah.nongnu.org/projects/tinycc",
		"name": "C (tcc)",
		"prettify": "c",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#include <stdio.h>\nint main() {\n\tputs(\"Hello, World!\");\n\treturn 0;\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"cardinal": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://www.esolangs.org/wiki/Cardinal",
		"name": "Cardinal",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "%\"Hello, World!\";x"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"ceres": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/alexander-liao/ceres",
		"name": "Ceres",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "389960998265612367812323333 115dÆP"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"ceylon": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://ceylon-lang.org/",
		"name": "Ceylon",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "shared void run() {\n\tprint(\"Hello, World!\");\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags",
			"options"
		],
		"update": "manual"
	},
	"chain": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/ConorOBrien-Foxx/Chain",
		"name": "Chain",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"chef": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "http://search.cpan.org/~smueller/Acme-Chef/",
		"name": "Chef",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello World.\n\nIngredients.\n 72 l H\n101 l e\n108 l l\n111 l o\n 44 l _comma\n 32 l _space\n 87 l w\n114 l r\n100 l d\n 33 l _bang\n\nMethod.\nPut _bang into the mixing bowl.\nPut d into the mixing bowl.\nPut l into the mixing bowl.\nPut r into the mixing bowl.\nPut o into the mixing bowl.\nPut w into the mixing bowl.\nPut _space into the mixing bowl.\nPut _comma into the mixing bowl.\nPut o into the mixing bowl.\nPut l into the mixing bowl.\nPut l into the mixing bowl.\nPut e into the mixing bowl.\nPut H into the mixing bowl.\nPour contents of the mixing bowl into the baking dish.\n\nServes 1."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "cpan"
	},
	"changeling": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/DennisMitchell/shapescript",
		"name": "Changeling",
		"piggyback": "shapescript",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"IpQ:AQ..\n\"\"2(-znK]\n\"\" \"Tr4r[\n\"\")$dNcA.\n\"\" #!&...\n.........\n.........\n.........\n.........\n"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"chapel": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://chapel.cray.com/",
		"name": "Chapel",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "write(\"Hello, World!\");"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"charcoal": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/somebody1234/Charcoal",
		"name": "Charcoal",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"check": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ScratchMan544/check-lang",
		"name": "Check",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"o"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"cheddar": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://cheddar.vihan.org/",
		"name": "Cheddar",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print (\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "npm"
	},
	"chip": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Phlarx/chip",
		"name": "Chip",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "!ZZZZZZZZZZZZt\nxxxxxxxxxxxxxh\n)))))xx)))))xg\nx))))))x)))))f\nxxxxxxx)x)xxxe\n)x))))xx)x)xxd\nx)))))x))x))xc\nxxxx)xx)))xxxb\nx)xx)xx))xxx)a"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-w"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"cil-mono": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.mono-project.com/docs/tools+libraries/tools/monodis/",
		"name": "CIL (Mono IL assembler)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ".assembly Program {}\n.assembly extern mscorlib {}\n\n.method static void Main()\n{\n     .entrypoint\n     .maxstack 1\n     ldstr \"Hello, World!\"\n     call void [mscorlib]System.Console::WriteLine(string)\n     ret\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"cinnamon-gum": {
		"categories": [
			"recreational"
		],
		"encoding": "xxd",
		"link": "https://github.com/quartata/cinnamon-gum",
		"name": "Cinnamon Gum",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "00000000: 2201 1d92 93bd 33f1 a12f 2a4e 940b 32    \".....3../*N..2"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"cixl": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://github.com/basic-gongfu/cixl",
		"name": "cixl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "say 'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"cjam": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://sourceforge.net/p/cjam",
		"name": "CJam",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "hg"
	},
	"clean": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://clean.cs.ru.nl",
		"name": "Clean",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "V",
						"payload": {
							"TIO_CFLAGS": [
								"-b"
							]
						}
					},
					{
						"command": "F",
						"payload": {
							".code.tio": "module main\n\nStart:: String\nStart = \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "version"
	},
	"clips": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.clipsrules.net/",
		"name": "CLIPS",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(printout t \"Hello, World!\")\n(exit)"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "version"
	},
	"clisp": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.clisp.org/",
		"name": "Common Lisp",
		"prettify": "lisp",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(format t \"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"clojure": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://clojure.org/",
		"name": "Clojure",
		"prettify": "clj",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(println \"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"cobol-gnu": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://sourceforge.net/projects/open-cobol/",
		"name": "COBOL (GNU)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "PROGRAM-ID.H.PROCEDURE\nDIVISION.DISPLAY \"Hello, World!\".\n"
						}
					},
					{
						"command": "V",
						"payload": {
							"TIO_CFLAGS": ["-free"]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "manual"
	},
	"coconut": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://coconut-lang.org/",
		"name": "Coconut",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\" |> print"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "pip"
	},
	"coffeescript": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://coffeescript.org/",
		"name": "CoffeeScript 1",
		"prettify": "coffee",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "console.log(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "npm"
	},
	"coffeescript2": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://coffeescript.org/",
		"name": "CoffeeScript 2",
		"prettify": "coffee",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "console.log(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "npm"
	},
	"commata": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/totallyhuman/commata",
		"name": ",,,",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"commentator": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cairdcoinheringaahing/Commentator",
		"name": "Commentator",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"commercial": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/tuxcrafting/commercial",
		"name": "Commercial",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\" - Satisfied Consumer of Hello\nHello has been selling out worldwide!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"condit": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/condit",
		"name": "Condit",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "when H=\"\"then set H=\"Hello, World!\"put H\n"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"convex": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/GamrCorps/Convex",
		"name": "Convex",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"cood": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/jesobreira/cood/tree/php-interpreter",
		"name": "Cood",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "I want 72 of this.\nI'm very hungry.\nI want 101 of this.\nI'm very hungry.\nI want 108 of this.\nI'm very hungry.\nI'm very hungry.\nI want 111 of this.\nI'm very hungry.\nI want 44 of this.\nI'm very hungry.\nI want 32 of this.\nI'm very hungry.\nI want 87 of this.\nI'm very hungry.\nI want 111 of this.\nI'm very hungry.\nI want 114 of this.\nI'm very hungry.\nI want 108 of this.\nI'm very hungry.\nI want 100 of this.\nI'm very hungry.\nI want 33 of this.\nI'm very hungry."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"corea": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/Corea",
		"name": "Corea",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"cow": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://bigzaphod.github.io/COW/",
		"name": "COW",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "MOo MOo MOo moO MOo moO MOo moO moO MoO moO MoO moO moO MoO MOO MoO MoO MoO MoO MOO moO MoO MoO MoO MOO moO MoO MoO MoO MoO moO MOo MOo moO MoO MoO MoO mOo mOo mOo MOo moo mOo MOo moo mOo MoO MoO MoO moo moO moO moO Moo moO MOo MOo moO MOo Moo moO Moo Moo MoO moO MoO MoO MoO MoO moO MoO MoO MoO Moo MoO moO MOo MOo moO MOO moO MOo Moo mOo mOo moo"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"cpp-clang": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "http://clang.llvm.org/",
		"name": "C++ (clang)",
		"prettify": "cpp",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#include <iostream>\nint main() {\n\tstd::cout << \"Hello, World!\" << std::endl;\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"cpp-gcc": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://gcc.gnu.org/",
		"name": "C++ (gcc)",
		"prettify": "cpp",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#include <iostream>\nint main() {\n\tstd::cout << \"Hello, World!\" << std::endl;\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"cquents": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/stestoltz/cQuents/tree/cquents-0",
		"name": "cQuents 0",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello, World!?0"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"crayon": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ETHproductions/crayon",
		"name": "Crayon",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"q"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"crystal": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://crystal-lang.org",
		"name": "Crystal",
		"prettify": "ruby",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "puts \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"cs-core": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.microsoft.com/net/core/platform",
		"name": "C# (.NET Core)",
		"prettify": "cs",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "using System;\nclass Program {\n\tstatic void Main(string[] args) {\n\t\tConsole.WriteLine(\"Hello, World!\");\n\t}\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"cs-csc": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.mono-project.com/docs/about-mono/releases/5.0.0/#csc",
		"name": "C# (Visual C# Compiler)",
		"prettify": "cs",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "using System;\nclass Program {\n\tstatic void Main(string[] args) {\n\t\tConsole.WriteLine(\"Hello, World!\");\n\t}\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"cs-mono": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.mono-project.com/docs/about-mono/languages/csharp/",
		"name": "C# (Mono C# compiler)",
		"prettify": "cs",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "using System;\nclass Program {\n\tstatic void Main(string[] args) {\n\t\tConsole.WriteLine(\"Hello, World!\");\n\t}\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"csl": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/jammy-dodgers/CSL",
		"name": "CSL",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "p&1*+1*+++1+++1p_~+++++++1pD_~+++++1pD&++1pD&*+++1+++++1pD&*++1++++1pp&&D+++++1D*+1*D+++1|p&++1pDpD&++++++1pD&+++1&*++++1++++1DDpD*+1*D+++++1E!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"cubically": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/aaronryank/cubically",
		"name": "Cubically",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "+53@6+1F2L2+0@6L2F2U3R3F1L1+2@66L3F3R1U1B3+0@6:4U1R1+00@6-000@6+50000@6+000000@6+2-000000@6-5+4000@6-00@6/0+00@6:0+0/0+00@6"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"cubix": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ETHproductions/cubix",
		"name": "Cubix",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "./v.o;@?/\"!dlroW\"S',u/\"Hello\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"curry-sloth": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://babel.ls.fi.upm.es/research/Sloth/",
		"name": "Curry (Sloth)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "import IO\n\nmain = putStr \"Hello, World!\"\n"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"cy": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cyoce/Cy",
		"name": "Cy",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\" :<"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"d": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://dlang.org/",
		"name": "D",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "import std.stdio; void main(){writeln(\"Hello, World!\");}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "manual"
	},
	"dash": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://wiki.debian.org/Shell",
		"name": "Dash",
		"prettify": "sh",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"dc": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.gnu.org/software/bc/manual/dc-1.05/html_mono/dc.html",
		"name": "dc",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "[Hello, World!]P"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"deadfish-": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/deadfish-",
		"name": "Deadfish~",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "w"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"decimal": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/aaronryank/Decimal",
		"name": "Decimal",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "13072101108108111044032087111114108100033D 301"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"#"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"delimit": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/MistahFiggins/Delimit",
		"name": "Del|m|t",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "=#:#Hello, World!#/##3#=#?#9#\""
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"#"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"deorst": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cairdcoinheringaahing/Deorst",
		"name": "Deorst",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "'Hello, World!'O"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"detour": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cyoce/detour",
		"name": "Detour",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "`u\n@\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"dobela": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://deewiant.iki.fi/projects/dobelx64/",
		"name": "DOBELA",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ",,.,,,,.,..,,.,,,..,..,,,...,,.,,..,....,.,.,...,,.,,,,,,,.,..,,,..,....,..,..,,,..,..,,,..,,.,.,.,,.,,,$^\n.                                                                                                         #"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"dreaderef": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/ScratchMan544/Dreaderef",
		"name": "Dreaderef",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "chro \"H\"\nchro \"e\"\nchro \"l\"\nchro \"l\"\nchro \"o\"\nchro \",\"\nchro \" \"\nchro \"W\"\nchro \"o\"\nchro \"r\"\nchro \"l\"\nchro \"d\"\nchro \"!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"dstack": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/alejandrocoria/DStack",
		"name": "DStack",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "@0\nHello, World!\n@\nad"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"eacal": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/eacal",
		"name": "eacal",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "put string Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"ecpp-c": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://github.com/aaronryank/ecpp",
		"name": "ecpp + C (gcc)",
		"prettify": "c",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#include <stdio.h>\n\n#def `f x` f(x)\n\nint main() {\n\tputs \"Hello, World!\";\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"ecpp-cpp": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://github.com/aaronryank/ecpp",
		"name": "ecpp + C++ (gcc)",
		"piggyback": "ecpp-c",
		"prettify": "c",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#include <cstdio>\n\n#def `f x` f(x)\n\nint main() {\n\tputs \"Hello, World!\";\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "piggyback"
	},
	"element": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/PhiNotPi/Element",
		"name": "Element",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello\\,\\ World\\!`"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"elf": {
		"categories": [
			"practical"
		],
		"encoding": "xxd",
		"link": "https://refspecs.linuxfoundation.org/elf/elf.pdf",
		"name": "ELF (x86/x64, Linux)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "0000000: 7f 45 4c 46 01 00 00 00 00 00 00 00 00 90 43 0d  .ELF..........C.\n0000010: 02 00 03 00 19 90 43 0d 19 90 43 0d 04 00 00 00  ......C...C.....\n0000020: b9 2e 90 43 0d b2 0d cd 80 cc 20 00 01 00 48 65  ...C...... ...He\n0000030: 6c 6c 6f 2c 20 57 6f 72 6c 64 21                 llo, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "manual"
	},
	"elixir": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://elixir-lang.org/",
		"name": "Elixir",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "IO.puts \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"elvm-ir": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/shinh/elvm",
		"name": "ELVM-IR",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "putc 72\nputc 101\nputc 108\nputc 108\nputc 111\nputc 44\nputc 32\nputc 87\nputc 111\nputc 114\nputc 108\nputc 100\nputc 33\nexit"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"emacs-lisp": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.gnu.org/software/emacs/manual/eintr.html",
		"name": "Emacs Lisp",
		"prettify": "lisp",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(princ \"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"emmental": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/catseye/Emmental",
		"name": "Emmental",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ";#58#126#63#36!;#46#36#!;#0#1!;#0#2!;#0#3!;#0#4!;#0#5!;#0#6!;#0#7!#0#33#100#108#114#111#87#32#44#111#108#108#101#72$"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"emoji": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki/Emoji",
		"name": "Emoji",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "💬Hello, World!💬➡"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"emojicode": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "http://www.emojicode.org/",
		"name": "Emojicode",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "🏁🍇😀🔤Hello, World!🔤🍉"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"emotinomicon": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/Emotinomicon",
		"name": "Emotinomicon",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "😭!dlroW ,olleH😲⏪⏬⏩"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"enlist": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/alexander-liao/enlist",
		"name": "Enlist",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "“Hello, World!”"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"erlang-escript": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://erlang.org/doc/man/escript.html",
		"name": "Erlang (escript)",
		"prettify": "erlang",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\nmain([])->\nio:fwrite(\"Hello, World!\")."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"es": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/wryun/es-shell",
		"name": "es",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"eta": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "http://www.miketaylor.org.uk/tech/eta/doc/",
		"name": "ETA",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "NINENAHAENATOENAAAENATSENTNOENIIENSAENATSENATOENATOENAHOENTOAEOOOOOOOOOOOOO"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"evil": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://web.archive.org/web/20070103000858/www1.pacific.edu/~twrensch/evil/index.html",
		"name": "evil",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "aeeeaeeewueuueweeueeuewwaaaweaaewaeaawueweeeaeeewaaawueeueweeaweeeueuw"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"explode": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/stestoltz/Explode",
		"name": "Explode",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "@1_0+E\n@1_0+17\n@1_0+1e\n@1_0+1e\n@1_0+1h\n@1_0+c\n\n@1_0+T\n@1_0+1h\n@1_0+1k\n@1_0+1e\n@1_0+16\n@1_0+1"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"extrac": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/extrac",
		"name": "ExtraC",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "printf(quote(Hello)CHAR CHAR quote(World)CHAR,44,32,33)"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"face": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/KeyboardFire/face",
		"name": "face",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(Hello, World!\n)\\$*m%*7%+%%%,c'$,ioow%$%o"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"factor": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://factorcode.org/",
		"name": "Factor",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "USE: io \"Hello, World!\" print"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"felix": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/felix-lang/felix",
		"name": "Felix",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print$ \"Hello, World!\";"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"fernando": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki/FerNANDo",
		"name": "FerNANDo",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "7 7\n3\n5 5\n6 5\n4 3 3\n0 5 3 0 7 3 0 0\n0 5 7 0 0 5 0 4\n0 6 5 2 4 6 2 3\n0 6 6 0 7 7 2 3\n0 6 6 2 5 4 7 4\n2 2\n3 5\n3"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"feu": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/tuxcrafting/feu",
		"name": "FEU",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "a/Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"fish": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki/Fish",
		"name": "><>",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "!v\"Hello, World!\"r!\n >l?!;o"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"fish-shell": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://fishshell.com/",
		"name": "fish",
		"prettify": "sh",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"fission": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/C0deH4cker/Fission",
		"name": "Fission",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "R\"Hello, World!\";"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "manual"
	},
	"fission2": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/C0deH4cker/Fission",
		"name": "Fission 2",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "R\"Hello, World!\";"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"flipbit": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/cairdcoinheringaahing/Flipbit",
		"name": "Flipbit",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ">^>>>^>>>.^<<^<^<<^>>>>>.^<<<^>>>..^<^>.^<^<<<<<^>>>>>>.<<^<^>>>.^<^<^<<^<^<^>>>>>>.<<<^<^<^>>>>>.^<<^<^<^>>>>.<^<^<^<^>>>>.<<<^>>>.^<<^<<<<^>>>>>>."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"focal": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.cozx.com/dpitts/",
		"name": "FOCAL-69",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "10.10 t \"Hello, World!\"\ng"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"foo": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://esolangs.org/wiki/Foo",
		"name": "Foo",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"forked": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/aaronryank/Forked",
		"name": "Forked",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "89*@AA*i@7+@@3+@P4B*@C'!F+!U@3+@6'@8'@3B*!&"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"forte": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/judofyr/forter",
		"name": "Forte",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "102 PRINT \"Hello, World!\":END"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"forth-gforth": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/",
		"name": "Forth (gforth)",
		"prettify": "forth",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ".( Hello, World!)"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"fortran-gfortran": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://gcc.gnu.org/fortran/",
		"name": "Fortran (GFortran)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print'(\"Hello, World!\")'\nend"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"fourier": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/beta-decay/Fourier",
		"name": "Fourier",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "`Hello, World!`"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"fs-core": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.microsoft.com/net/core/platform",
		"name": "F# (.NET Core)",
		"prettify": "fs",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "printfn \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"fs-mono": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.mono-project.com/",
		"name": "F# (Mono)",
		"prettify": "fs",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "printfn \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"funciton": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Timwi/Funciton",
		"name": "Funciton",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "╔═══════════════╗\n║ 2388215291394 ║\n║ 5970717094395 ║\n║ 9830070909071 ║\n║ 3359207734160 ║\n║ 6896177782105 ║\n║ 7169552834632 ║\n╚═══════╤═══════╝\n        │"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"functoid": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/bforte/Functoid",
		"name": "Functoid",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"H\",\"e\",\"l\",\"l\",\"o\",\",\",\" \",\"W\",\"o\",\"r\",\"l\",\"d\",\"!\",@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"funky": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TehFlaminTaco/Funky",
		"name": "Funky",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"gaia": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/splcurran/Gaia",
		"name": "Gaia",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "“Hello, World!”"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"gaotpp": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/tuxcrafting/gaot-plus-plus",
		"name": "Gaot++",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa bleeeeeeeeeet\nbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa bleeeeeeeeeet\nbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa bleeeeeeeeeeeeet bleeeeeeeeeet bleeeeeeeeeet\nbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa bleeeeeeeeeet\nbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa bleeeeeeeeeet\nbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa bleeeeeeeeeet\nbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa bleeeeeeeeeet\nbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa bleeeeeeeeeeeeet bleeeeeeeeeet baaaa bleet bleeeeeeeeeet\nbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa bleeeeeeeeeet\nbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa bleeeeeeeeeet\nbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa bleeeeeeeeeet"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"gap": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.gap-system.org/",
		"name": "GAP",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Print(\"Hello, World!\");"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"glypho": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://web.archive.org/web/20060621185740/http://www4.ncsu.edu/~bcthomp2/glypho.txt",
		"name": "Glypho",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "aabcabababbaababaabcabbaabababbcabbaabababababababbaabbaabababababababbaabbaaabcabbaababaabcaabcabbaabababbcabababbaabbaababaabcaabcabbaaabcabbaabababbaabbaababaabcabcaabababababbaabbaabbaababaabcabaaababaabaabbaabcaabababbaabbaaabcaabcabbaabababbcabababbcabababbaabaaababaabaabababbaabababbaabababaaababaabaabbaabababbaaabcabbaababaabcabcaabababababbaabbaabbaababaabcabcaabaaababaabaabbaabababbcaabcabbaaabcaabcabbaaabcabbaabababbaabababbcabababbaabaaabababcaabbaaabaabacabbbabcb"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"glypho-shorthand": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://web.archive.org/web/20060621185740/http://www4.ncsu.edu/~bcthomp2/glypho.txt",
		"name": "Glypho (shorthand)",
		"piggyback": "glypho",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "1d+d1+d*+ddd++ddd++1+d11+d*d++d11+1+d++d1-dd+++d1<d>+-d++11+d*d*d+<d>d+d+d<d>+d+1+d1-dd+++d1-<d>+d*1+11+1+d+d*d+<d-+>[o]"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"gnuplot": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.gnuplot.info/",
		"name": "gnuplot",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "set print '-'\nprint 'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"go": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://golang.org/",
		"name": "Go",
		"prettify": "go",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "package main\nimport \"fmt\"\nfunc main() {\n\tfmt.Println(\"Hello, World!\")\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"golfish": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Sp3000/Golfish",
		"name": "Gol><>",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"!dlroW ,olleH\"H"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"golfscript": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "http://www.golfscript.com/golfscript/",
		"name": "GolfScript",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"grass": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/grass",
		"name": "Grass",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "wv\nwwWWwWWWwv\nWwwww\nWWw\nWWWw\nWWWWw\nWWWWWw\nWWWWWWw\nWWWWWWWw\nWwwwwwwwwwwww\nWWWWw\nWWWWWWWw\nWWWWWWWWWWWWWWw\nWWWWWWWWWWWww\nWWWWWWWWWWww\nWWWWWWWWWWWWw\nWWWWWWWWWWww\nWWWWWWWWWWwwwwwww\nWWWWWWWWWWWWWWw\nWWWWWWWWWWWWWWWWw\nWWWWWWWWWWWWWWWWWWWWWWw\nWWWWWWWWWWWWWWWWWWWww\nWWWWWWWWWWWWWWWWWWww\nWWWWWWWWWWWWWWWWWWwwwww\nWWWWWWWWWWWWWWWWWWWWWww\nWWWWWWWWWWWWWWWWWWWWWWWw\nWWWWWWWWWWWWWWWWWWWWWWWWWWwwwwwwwwwwwwwwwwwwwwwwwwwww\nWwwwwwwwwwww\nWWwwwwwww\nWWWwwwwwww\nWWWWw\nWWWWWwwwwwwww\nWWWWWWwwwwwwwwwwwwwwwww\nWWWWWWWwwwwwwwwwwwwwwwwwwwww\nWWWWWWWWwwwwwwwwwwwwwwwww\nWWWWWWWWWwwww\nWWWWWWWWWWwwwwwwwwwww\nWWWWWWWWWWWwwwwwww\nWWWWWWWWWWWWwwwwwwwwwwwwwwwwww\nWWWWWWWWWWWWWwwwwwwwwwwwwwwwwwwwwwwwwww"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"grime": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/iatorm/grime",
		"name": "Grime",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ".+"
						}
					},
					{
						"command": "F",
						"payload": {
							".input.tio": "Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"groovy": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://groovy-lang.org/",
		"name": "Groovy",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print 'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"gs2": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/nooodl/gs2",
		"name": "GS2",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "↕h"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"haskell": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.haskell.org/",
		"name": "Haskell",
		"prettify": "hs",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "main = putStr \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"haxe": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://haxe.org",
		"name": "Haxe",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "class Main {\n  static public function main():Void {\n    Sys.print(\"Hello, World!\");\n  }\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"haystack": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/kade-robertson/haystack",
		"name": "Haystack",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"o|"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"hbcht": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://git.metanohi.name/hbcht.git/",
		"name": "Half-Broken Car in Heavy Traffic",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "; Prints \"Hello, world!\n\".\n@outtext\n\n     v                           >v       ^\n> v  <                            v     >>^<\n  v  ^  v                         v     ^\n     ^  <                         v     ^\n        ^                         v     ^\n  >   />^<v                       v     ^\n  ^  >v<  <                       v     ^\n          ^                       v     ^\n  ^   > />^<v                     v     ^   #\n  ^   ^>v<  <                     v     ^   ^\n  ^         ^                     v     ^   ^\n  ^     > />^<v                   v     ^   ^\n  ^     ^>v<  <                   v     ^   ^\n  ^           ^                   v     ^   ^\n  ^       > />^<v                 v     ^   ^\n  ^       ^>v<  <                 v     ^   ^\n  ^             ^                 v     ^   ^\n  ^         > />^<v               v     ^   ^\n  ^         ^>v<  <           >v  v     ^ >>^<\n  ^               ^           ^v  v     ^ ^\n  ^           > />^<v         ^v  v     ^ ^\n  ^           ^>v<  <         ^v  v   >>^<^\n  ^                 ^         ^v  v   ^   ^\n  ^             > />^<v       ^v  v   ^   ^\n  ^             ^>v<  <       ^v  v   ^   ^\n  ^                   ^       ^v  v   ^   ^\n  ^               > />^<v     ^v  v   ^   ^\n  ^               ^>v<  <     ^v  v   ^   ^\n  ^                     ^     ^v  v   ^   ^\n  ^                 > />^<v   ^v  v   ^   ^\n  ^                 ^>v<  <   ^v  v   ^   ^\n  ^                       ^   ^v  v   ^   ^\n  ^                   > />^<v ^v  v   ^   ^\n  ^                   ^>v<  < ^v  v   ^   ^\n  ^                         ^ ^v  v   ^   ^\n  ^                     > />^<^v  v   ^   ^\n  ^                >>   ^     ^ < v   ^   ^\n  ^          >v<<<<<<<<<<<<    v  v   ^   ^\n  ^           v   >^<          v  v >>^<  ^\n  ^           v  > >v          v  v ^     ^\n> ^   v       v  ^^            v  v ^     ^\n^ ^           v  ^^            v  v ^     ^\n^ ^           v  ^^            v  v ^     ^\n^ ^           v  ^^            v  v ^     ^\n^ ^           v  ^^            v  v ^     ^\n^ ^           v  ^^            v  v ^     ^\n^ ^           v  ^^            v  v ^     ^\n^ ^           v  ^^            v  v ^     ^\n^ ^           v  ^^            v  v ^     ^\n^ ^           v  ^^            v  v ^     ^\n^ ^           v  ^^            v  v ^     ^\n^ ^           v  ^^            v  v ^   >>^<\n^ ^           v  ^^ <          v  v ^   ^\n^ ^           v>>^<            v  v ^   ^\n^ ^                            v  v ^   ^\n^ ^           v^               v  v ^   ^\n^ ^           v^               v  v ^   ^\n^ ^           v^               v  v ^     v\n^ ^           v^               v  v ^>v   <\n^ ^           v^               v  v ^ >>^<^\n^ ^        >v <^               v  v ^ ^   ^\n^ ^         >>^^<              v  v ^     ^\n^ ^         ^                  v  v ^     ^\n^ ^                            v  >>^<    ^\n^ ^                            v  ^       ^\n^ ^                            v          ^\n^ ^                            v          ^\n^ ^    v                       v          ^\n^ ^    <                       v          ^\n^     >^<                      v          ^\n^     ^                        v          ^\n^     v                        > ^<       ^\n^     <                        ^\n    >>^<\n >  ^<v\n ^ >v<<\n  v\n>v<\n  ^\n >^<\n o>v\n v >  ^<\n v ^"
						}
					}
				],
				"response": "Hello, world!"
			}
		},
		"update": "pip"
	},
	"hdbf": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/Property404/hdbf",
		"name": "Hyper-Dimensional Brainfuck",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "--<-<<+[+[<+>--->->->-<<<]>]<<--.<++++++.<<-..<<.<+.>>.>>.<<<.+++.>>.>>-.<<<+."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"hexagony": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/m-ender/hexagony",
		"name": "Hexagony",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "H;e;P1;@/;W;o;/l;;o;Q/r;l;d;2;P0"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"hodor": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/hummingbirdtech/hodor",
		"name": "Hodor",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "hodor.hod(\"Hhodor? Hodor!? Hodor!? o,\", \"Hooodorrhodor orHodor!? d!\");"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"hspal": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/Hexadecimal-Stacking-Pseudo-Assembly-Language",
		"name": "Hexadecimal Stacking Pseudo-Assembly Language",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "20002140000020006440000020006C40000020007240000020006F40000020005740000020002040000020002C40000020006F40000020006C40000020006C400000200065400000200048400000140000"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"huginn": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://codestation.org/?h-action=menu-project&menu=submenu-project&page=&project=huginn",
		"name": "Huginn",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "V",
						"payload": {
							"TIO_OPTIONS": ["--no-argv"]
						}
					},
					{
						"command": "F",
						"payload": {
							".code.tio": "main() {\n\tprint(\"Hello, World!\");\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"husk": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/barbuz/Husk",
		"name": "Husk",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "¨H◄⁰,ω]!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"i": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/mlochbaum/ILanguage",
		"name": "I",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "\"Hello, World!\""
			}
		},
		"update": "git"
	},
	"icon": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/gtownsend/icon",
		"name": "Icon",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "procedure main()\n    write(\"Hello, World!\")\nend"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"idris": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.idris-lang.org/",
		"name": "Idris",
		"prettify": "hs",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "main : IO ()\nmain = putStr \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"incident": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/incident",
		"name": "Incident",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "A1.A2.A3,A4.A5,A6,A7;A8;B1;B2,B3.B4,B5;B6.B7.B8;C1,C2.C3;C4.C5,C6;C7,:C8.D1;D2,D3.D4,D5.D6;D7.D8,E1;E2;E3;E4,E5,E6.E7,E8.F1;F2.F3.F4,F5.F6;:F7.F8;G1,G2;G3,G4;G5.G6.G7.G8;H1.H2;H3.H4.H5.H6,H7;H8;I1,I2.I3;I4,I5.:I6,I7.I8,J1;J2,J3,J4,J5;J6;J7.J8;K1;K2;K3;K4,K5,K6;K7.K8,L1;L2,L3;L4,:L5;L6;L7,L8,M1.M2.M3.M4,M5,M6,M7,M8,N1.N2;N3,N4.N5;N6,N7.N8,Z4;a1,a1.:Z3.A1,a1;a2,a2,A1,A2.a2,a3.a3.A2,A3,a3.a5,a5,A3;A5.a5,a6,a6.A5;A6.a6.:a8.a8.A6;A8.a8;b2,b2.A8;B2.b2,b4.b4,B2,B4;b4.b5;b5;B4;B5;b5.b8.b8,B5.:B8.b8.c1;c1,B8,C1;c1,c2,c2;C1;C2,c2.c5,c5;C2,C5,c5.c8.c8,C5;C8;c8,d1;:d1.C8,D1;d1.d2;d2.D1.D2.d2.d5,d5,D2.D5.d5.d8,d8;D5;D8.d8,e5.e5.D8;E5,:e5,e8,e8,E5,E8;e8,f1.f1.E8.F1;f1;f2,f2;F1.F2.f2;f5.f5;F2;F5,f5;f7;f7.:F5,F7,f7;f8.f8;F7.F8,f8,g1;g1.F8;G1.g1,g2;g2.G1,G2,g2,g3;g3;G2,G3;g3,:g4,g4.G3;G4.g4.g5.g5,G4,G5.g5;g7;g7.G5;G7,g7,g8;g8.G7,G8;g8;h4.h4,G8;:H4,h4;h8,h8,H4.H8,h8.i5.i5;H8;I5;i5.i8;i8.I5,I8,i8.j1;j1;I8,J1;j1.j3.:j3;J1,J3;j3;j4,j4.J3,J4.j4,j8,j8.J4;J8,j8.k1.k1.J8.K1,k1,k2.k2;K1,K2;:k2.k5;k5;K2,K5.k5,k8;k8,K5.K8,k8;l1,l1;K8;L1;l1,Z1;Z2;Z2,Z3.Z2;Z1.Z1,:l2;l2;L1;L2,l2;l4.l4.L2.L4;l4.l5.l5.L4;L5;l5.l8.l8,L5.L8;l8;m2;m2.L8;:M2.m2,m3,m3,M2,M3,m3;m4.m4.M3;M4.m4,m5.m5.M4,M5,m5;m7,m7.M5.M7;m7.m8.:m8,M7,M8,m8,n1;n1.M8,N1;n1.n3,n3;N1;N3,n3.n5,n5;N3,N5;n5,n6.n6.N5.N6.:n6,n7;n7;N6.N7;n7.n8,n8;N7,N8;n8,a4,a4;Z3;A4,a4;a7.a7.A4.A7;a7,b1.b1;:A7;B1,b1;b3;b3,B1,B3.b3,b6.b6;B3;B6,b6;b7;b7,B6,B7,b7;c3,c3.B7,C3,c3.:c4.c4,C3,C4.c4;c6.c6,C4,C6.c6;c7,c7;C6.C7,c7.d3;d3.C7,D3,d3;d4;d4.D3,:D4,d4;d6,d6,D4,D6.d6;d7,d7,D6,D7.d7,e1,e1;D7,E1.e1,e2,e2;E1;E2,e2.e3;:e3,E2,E3,e3.e4;e4.E3.E4;e4,e6;e6;E4,E6,e6.e7.e7;E6.E7.e7,f3,f3.E7,F3;:f3.f4;f4,F3;F4,f4;f6;f6.F4.F6,f6,g6.g6;F6.G6.g6.h1;h1;G6;H1,h1.h2;h2.:H1;H2,h2.h3,h3,H2,H3,h3.h5.h5;H3,H5;h5;h6;h6;H5.H6.h6,h7.h7.H6,H7.h7;:i1,i1,H7.I1,i1.i2;i2;I1;I2,i2,i3.i3,I2,I3.i3;i4;i4;I3,I4,i4.i6,i6,I4.:I6,i6.i7.i7,I6;I7;i7.j2;j2;I7.J2;j2,j5;j5.J2.J5;j5.j6,j6.J5,J6,j6;j7;:j7;J6,J7.j7;k3,k3;J7.K3.k3.k4.k4,K3.K4;k4,k6;k6,K4.K6;k6,k7.k7;K6,K7.:k7,l3.l3.K7;L3;l3.l6;l6,L3;L6,l6;l7,l7,L6;L7.l7,m1.m1,L7;M1;m1,m6;m6,:M1;M6,m6;n2;n2;M6,N2,n2;n4.n4,N2;N4,n4.N8.N4,Z4,Z4"
						}
					}
				],
				"response": "Hello, world!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"intercal": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "http://www.catb.org/~esr/intercal/",
		"name": "INTERCAL",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "DO,1<-#14 DO,1SUB#1<-#238 DO,1SUB#2<-#108 DO,1SUB#3<-#112 PLEASE DO,1SUB#4<-#256 DO,1SUB#5<-#64 DO,1SUB#6<-#194 PLEASE DO,1SUB#7<-#48 DO,1SUB#8<-#26 DO,1SUB#9<-#244 PLEASE DO,1SUB#10<-#168 DO,1SUB#11<-#24 DO,1SUB#12<-#16 PLEASE DO,1SUB#13<-#162 DO,1SUB#14<-#52 DO READ OUT,1 DO GIVE UP"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "version"
	},
	"io": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://iolanguage.org/",
		"name": "Io",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\" print"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"j": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://jsoftware.com/",
		"name": "J",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo 'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"jq": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://stedolan.github.io/jq/",
		"name": "jq",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "V",
						"payload": {
							"TIO_OPTIONS": [
								"--null-input",
								"--raw-output"
							]
						}
					},
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"jx": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.2bestsystems.com/foundation/j/jx1/",
		"name": "Jx",
		"piggyback": "j",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo 'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"j-uby": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cyoce/J-uby",
		"name": "J-uby",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "put = :puts & $>\nput ^ \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"japt": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/ETHproductions/japt",
		"name": "Japt",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "`HÁM, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"java-openjdk": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://openjdk.java.net/",
		"name": "Java (OpenJDK 8)",
		"prettify": "java",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "public class Main {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"Hello, World!\");\n\t}\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags",
			"options"
		],
		"update": "dnf"
	},
	"java-openjdk9": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://openjdk.java.net/projects/jdk9/",
		"name": "Java (OpenJDK 9)",
		"prettify": "java",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "public class Main {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"Hello, World!\");\n\t}\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags",
			"options"
		],
		"update": "dnf"
	},
	"javascript-babel-node": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://babeljs.io/",
		"name": "JavaScript (Babel Node)",
		"prettify": "javascript",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "console.log('Hello, World!')"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "npm"
	},
	"javascript-node": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://nodejs.org",
		"name": "JavaScript (Node.js)",
		"prettify": "javascript",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "console.log('Hello, World!')"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "manual"
	},
	"javascript-spidermonkey": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Releases/45",
		"name": "JavaScript (SpiderMonkey)",
		"prettify": "javascript",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "console.log('Hello, World!')"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "manual"
	},
	"jelly": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/DennisMitchell/jelly",
		"name": "Jelly",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "“3ḅaė;œ»"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"jellyfish": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/iatorm/jellyfish",
		"name": "Jellyfish",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "P\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"joy": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.latrobe.edu.au/humanities/research/research-projects/past-projects/joy-programming-language",
		"name": "Joy",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "stdout \"Hello, World!\" fputstring pop.\nquit"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"julia": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://julialang.org/",
		"name": "Julia 0.4",
		"prettify": "julia",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"julia5": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://julialang.org/",
		"name": "Julia 0.5",
		"prettify": "julia",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"julia6": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://julialang.org/",
		"name": "Julia 0.6",
		"prettify": "julia",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"k-kona": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/kevinlawler/kona",
		"name": "K (Kona)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\\echo \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"k-ok": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/JohnEarnest/ok",
		"name": "K (oK)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "{}`0:\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"kavod": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/kavod",
		"name": "kavod",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "72#101#108#108#111#44#32#87#111#114#108#100#33#"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"klein": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Wheatwizard/Klein",
		"name": "Klein",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"@"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"000",
								"-A"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"kotlin": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://kotlinlang.org",
		"name": "Kotlin",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "fun main(args: Array<String>) {\n\tprintln(\"Hello, World!\")\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags",
			"options"
		],
		"update": "github-release"
	},
	"ksh": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.kornshell.com/",
		"name": "ksh",
		"prettify": "sh",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"labyrinth": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/m-ender/labyrinth",
		"name": "Labyrinth",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "72.10:1.:8:..:):1:.#2#4..:1..4.:8.0.33.@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"lily": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://fascinatedbox.github.io/lily/",
		"name": "Lily",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"llvm": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://llvm.org/docs/LangRef.html",
		"name": "LLVM IR",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "@str = internal constant [14 x i8] c\"Hello, World!\\00\"\ndeclare i32 @puts(i8*)\ndefine i32 @main()\n{\n  call i32 @puts( i8* getelementptr ([14 x i8], [14 x i8]* @str, i32 0,i32 0))\n  ret i32 0\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"lnusp": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/lnusp",
		"name": "LNUSP",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "001 . !.!                  .OUTPUT          .EXIT\n001  .   !                 .                .\n001 ! .  !                 .                .\n001 .  !!                  .                .\n001 *                      .                .\n033 + !                    .                .\n001 *                      .                .\n100 + d                    .                .\n001 *                      .                .\n108 + l                    .                .\n001 *                      .                .\n114 + r                    .                .\n001 *                      .                .\n111 + o                    .                .\n001 *                      .                .\n087 + W                    .                .\n001 *                      .                .\n032 +                      .                .\n001 *                      .                .\n044 + ,                    .                .\n001 *                      .                .\n111 + o                    .                .\n001 *                      .                .\n108 + l                    .                .\n001 *                      .                .\n108 + l                    .                .\n001 *                      .                .\n101 + e                    .                .\n001 *                      .                .\n072 + H                    .                .\n001 *                      .                !\n001 .                      .               .\n001 .                      .              .\n001 .                      .             .\n001 .                      .            .\n001 !                      .           .\n001  .                     .          .\n001   .                    .         .\n001    .                   .        .\n001     .                @ .       .\n001      .                +.      .\n001       .                !     .\n001        .               .    .\n001         .           ?.....?@\n001          .         ?   .   ?\n001           .        .   .   *\n001            .       ?   .   ?\n001             !.......?..@..?"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"locksmith": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/Locksmith",
		"name": "Locksmith",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "070271901007101719010071087190100710871901017101719040471903027190807719010171017190101710471901007108719010071007190303719"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"logicode": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/LogicodeLang/Logicode",
		"name": "Logicode",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "var a=11011\nvar l=@(a+00)\nvar o=a+11\nout @1001000+@1100101+l+l+@o+@101100+@100000+@1010111+@o+@1110010+l+@1100100+@100001"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"lolcode": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "http://lolcode.org/",
		"name": "LOLCODE",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "HAI 1.2\nVISIBLE \"Hello, World!\"\nKTHXBYE"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"lost": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Wheatwizard/Lost",
		"name": "Lost",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "v<<<<<<<<<<<>>>>>>>>>>>>\n>%?!|\"Hello, WorldvU\"-+@\n   v"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-A"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"lua": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.lua.org",
		"name": "Lua",
		"prettify": "lua",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"ly": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/LyricLy/Ly",
		"name": "Ly",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"&o"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"m": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/DennisMitchell/m",
		"name": "M",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "“Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"make": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.gnu.org/software/make/",
		"name": "Make",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "$(info Hello, World!)\n\n.PHONY: main\n\nmain:\n\t@:"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"malbolge": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://www.lscheffer.com/malbolge.shtml",
		"name": "Malbolge",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "('&%:9]!~}|z2Vxwv-,POqponl$Hjihf|B@@>,=<M:9&7Y#VV2TSn.Oe*c;(I&%$#\"mCBA?zxxv*Pb8`qo42mZF.{Iy*@dD'<;_?!\\}}|z2VxSSQ"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"mariolang": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/tomsmeding/MarioLANG",
		"name": "MarioLANG",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "+>+>)+)+)+++)++++((((-[!)>->.\n+\"+\"===================#+\".\")\n+++!((+++++++++)++++++)<.---+\n++=#===================\")---.\n++((.-(.)).+++..+++++++.<---\n !+======================---\n=#>++++++++++++++.).+++.-!>!\n  =======================#=#"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"mascarpone": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/catseye/Mascarpone",
		"name": "Mascarpone",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "[!dlroW ,olleH]$............."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"mathematica": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.wolfram.com/wolframscript/",
		"name": "Wolfram Language (Mathematica)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-print"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "manual"
	},
	"mathics": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://mathics.github.io/",
		"name": "Wolfram Language (Mathics)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Print[\"Hello, World!\"]"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "pip"
	},
	"matl": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/lmendo/MATL",
		"name": "MATL",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"maverick": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/Maverick",
		"name": "Maverick",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "outc(32+40`69`76`76`79`12`0`55`79`82`76`68`1)"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"maxima": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://maxima.sourceforge.net/",
		"name": "Maxima",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\");"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"maybelater": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TehFlaminTaco/MaybeLater",
		"name": "MaybeLater",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"milky-way": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/zachgates/Milky-Way",
		"name": "Milky Way",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"minimal-2d": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki/Minimal-2D",
		"name": "Minimal-2D",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ">++  R<+++D R >++++++>+++++++++>++++++++++D\nD++>R/ </ +/U/-<<<<<<+++++++++++>+++>++++>L\n+   UU/->+LD    .++++++++++>.--------.----L\nR+++.>++.>--..+++.>.>-.>--.--------.+++.--U"
						}
					}
				],
				"response": "Hello, world"
			}
		},
		"update": "git"
	},
	"miniml": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/feresum/acml",
		"name": "miniML",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "map putchar \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"minkolang": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/elendiastarman/Minkolang",
		"name": "Minkolang",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"OOOOOOOOOOOOO."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"mirror": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/alexander-liao/mirror",
		"name": "Mirror",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"momema": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ScratchMan544/momema",
		"name": "Momema",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "-9 72-9 101-9 108-9 108-9 111-9 44-9 32-9 87-9 111-9 114-9 108-9 100-9 33"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"monkeys": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/monkeys",
		"name": "Monkeys",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "7 UP\n7 RIGHT\n7 RIGHT\n7 TEACH\n6 BOND\n4 RIGHT\n4 LEFT\n6 BOND\n6 BOND\n5 RIGHT\n5 LEFT\n5 RIGHT\n7 BOND\n7 TEACH\n7 TEACH\n4 TEACH\n4 TEACH\n6 YELL\n7 TEACH\n7 TEACH\n4 FIGHT\n5 TEACH\n6 YELL\n4 TEACH\n4 TEACH\n5 FIGHT\n6 YELL\n6 YELL\n4 TEACH\n5 FIGHT\n6 YELL\n7 EGO\n4 BOND\n7 TEACH\n4 TEACH\n6 YELL\n7 FIGHT\n4 TEACH\n6 YELL\n7 TEACH\n7 TEACH\n7 TEACH\n4 TEACH\n4 TEACH\n5 FIGHT\n6 YELL\n7 TEACH\n4 TEACH\n4 TEACH\n6 YELL\n4 TEACH\n5 FIGHT\n6 YELL\n4 FIGHT\n5 FIGHT\n5 FIGHT\n6 YELL\n4 FIGHT\n4 FIGHT\n6 YELL\n4 EGO\n4 TEACH\n4 TEACH\n6 YELL"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"moonscript": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://moonscript.org",
		"name": "Moonscript",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "lua"
	},
	"mornington-crescent": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/padarom/esoterpret",
		"name": "Mornington Crescent",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Take Northern Line to Hendon Central\nTake Northern Line to Bank\nTake Northern Line to Bank\nTake District Line to Gunnersbury\nTake District Line to Victoria\nTake Victoria Line to Seven Sisters\nTake Victoria Line to Victoria\nTake Victoria Line to Victoria\nTake District Line to Bank\nTake District Line to Hammersmith\nTake District Line to Cannon Street\nTake District Line to Hammersmith\nTake District Line to Cannon Street\nTake District Line to Bank\nTake District Line to Hammersmith\nTake District Line to Upminster\nTake District Line to Hammersmith\nTake District Line to Upminster\nTake District Line to Gunnersbury\nTake District Line to Paddington\nTake District Line to Acton Town\nTake Piccadilly Line to Holloway Road\nTake Piccadilly Line to Acton Town\nTake Piccadilly Line to Acton Town\nTake District Line to Gunnersbury\nTake District Line to Hammersmith\nTake District Line to Notting Hill Gate\nTake District Line to Upminster\nTake District Line to Notting Hill Gate\nTake District Line to Upminster\nTake District Line to Victoria\nTake Victoria Line to Seven Sisters\nTake Victoria Line to Victoria\nTake Victoria Line to Victoria\nTake District Line to Upminster\nTake District Line to Gunnersbury\nTake District Line to Mile End\nTake District Line to Hammersmith\nTake District Line to Notting Hill Gate\nTake District Line to Upminster\nTake District Line to Upminster\nTake District Line to Mile End\nTake District Line to Paddington\nTake District Line to Paddington\nTake District Line to Acton Town\nTake Piccadilly Line to Heathrow Terminals 1, 2, 3\nTake Piccadilly Line to Holborn\nTake Central Line to Holborn\nTake Central Line to Mile End\nTake District Line to Upminster\nTake District Line to Hammersmith\nTake District Line to Upminster\nTake District Line to Barking\nTake District Line to Hammersmith\nTake District Line to Upminster\nTake District Line to Gunnersbury\nTake District Line to Barking\nTake District Line to Gunnersbury\nTake District Line to Paddington\nTake District Line to Paddington\nTake Circle Line to Wood Lane\nTake Circle Line to Victoria\nTake Circle Line to Victoria\nTake District Line to Gunnersbury\nTake District Line to Hammersmith\nTake District Line to Upminster\nTake District Line to Gunnersbury\nTake District Line to Paddington\nTake District Line to Paddington\nTake District Line to Mile End\nTake Central Line to Fairlop\nTake Central Line to Mile End\nTake District Line to Barking\nTake District Line to Upminster\nTake District Line to Upminster\nTake District Line to Hammersmith\nTake District Line to Notting Hill Gate\nTake District Line to Upminster\nTake District Line to Mile End\nTake District Line to Gunnersbury\nTake District Line to Paddington\nTake District Line to Paddington\nTake District Line to Hammersmith\nTake District Line to Mile End\nTake District Line to Richmond\nTake District Line to Mile End\nTake District Line to Paddington\nTake District Line to Paddington\nTake District Line to Richmond\nTake District Line to Bank\nTake District Line to Hammersmith\nTake District Line to Upminster\nTake District Line to Stepney Green\nTake District Line to Hammersmith\nTake District Line to Stepney Green\nTake District Line to Upney\nTake District Line to Notting Hill Gate\nTake District Line to Notting Hill Gate\nTake District Line to Notting Hill Gate\nTake District Line to Upminster\nTake District Line to Upney\nTake District Line to Upminster\nTake District Line to Bank\nTake Circle Line to Bank\nTake Northern Line to Charing Cross\nTake Bakerloo Line to Charing Cross\nTake Bakerloo Line to Paddington\nTake Circle Line to Bank\nTake Circle Line to Bank\nTake Northern Line to Mornington Crescent"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"mumps": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "http://www.cs.uni.edu/~okane/",
		"name": "MUMPS",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "    write \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"my": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://bitbucket.org/zacharyjtaylor/my-language",
		"name": "MY",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "27á'←1Aá'←8Aá'2×←1Bá'←44á'←2Ġ'←78á'←1Bá'←4Bá'←8Aá'←AȦ'←33á'←"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"my-basic": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://github.com/paladin-t/my_basic",
		"name": "MY-BASIC",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"nim": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://nim-lang.org/",
		"name": "Nim",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "version"
	},
	"neim": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/okx-code/Neim",
		"name": "Neim",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(Hello, World!)B"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"neutrino": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/alexander-liao/neutrino",
		"name": "Neutrino",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"nhohnhehr": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/catseye/Nhohnhehr",
		"name": "Nhohnhehr",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "+-----------+\n|\\$010010000|\n|\\1100101011|\n|\\0110001101|\n|\\1000110111|\n|\\1001011000|\n|\\0100000010|\n|\\1011101101|\n|\\1110111001|\n|\\0011011000|\n|\\1100100001|\n|\\00001@    |\n+-----------+"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"nqt": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cairdcoinheringaahing/NotQuiteThere",
		"name": "NotQuiteThere",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "'Hello, World!'0"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"ntfjc": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/ConorOBrien-Foxx/ntfjc",
		"name": "NTFJ (NTFJC)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "~#~~#~~~@*~##~~#~#@*~##~##~~@::**~##~####@:*~~#~##~~@*~~#~~~~~@*~#~#~###@**~###~~#~@**~##~~#~~@*~~#~~~~#@*"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"numberwang": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki/Numberwang_(brainfuck_derivative)",
		"name": "Numberwang",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "69696969696969693696969623673363316969696968359533059595636969663633563583193"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"oasis": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/Adriandmen/Oasis",
		"name": "Oasis",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"objective-c-clang": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "http://clang.llvm.org/",
		"name": "Objective-C (clang)",
		"prettify": "c",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#include <stdio.h>\nint main() {\n\tputs(\"Hello, World!\");\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"occam-pi": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "http://projects.cs.kent.ac.uk/projects/kroc/trac/",
		"name": "occam-pi",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#INCLUDE \"course.module\"\nPROC hello (CHAN BYTE out!)\n  out.string (\"Hello, World!\", 0, out!)\n:"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"ocaml": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.ocaml.org/",
		"name": "OCaml",
		"prettify": "ml",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print_string \"Hello, World!\";;"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"octave": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.gnu.org/software/octave/",
		"name": "Octave",
		"prettify": "matlab",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "disp(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"ohm": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/nickbclifford/Ohm/tree/v1",
		"name": "Ohm",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"ohm2": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/nickbclifford/Ohm",
		"name": "Ohm v2",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"oml": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/ConorOBrien-Foxx/OML",
		"name": "OML",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"s"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"ooocode": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/brainfuck",
		"name": "oOo CODE",
		"piggyback": "brainfuck",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "OooOoooooOooooooooOoOoOoOoOoOooooOoOooOOooOooOooooOOooooOOooooOOooooooooooooOOooOoOOooooooOooOooOOooooOoOOoOOoOOoOOoOOoOOOoooooooOooOOoOOoooooooOOooooOoOOOoooOooOOOoooOooOOOooooooooooOOoOoOOoOOoOOOoooOooOOOoooOooOOooOOooooooooooOoOOOo"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"osh": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.oilshell.org/",
		"name": "OSH",
		"prettify": "sh",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"pain-flak": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Cis112233/Pain-Flak",
		"name": "Pain-Flak",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "V",
						"payload": {
							"TIO_OPTIONS": ["-A"]
						}
					},
					{
						"command": "F",
						"payload": {
							".code.tio": ")))))}{}{)))}{))(}{((((])][][][([(])()()([((]][[()()()(])}{][][)][(][([())(]][][][][][[))(]][[)][][)][][][][))(}{}{))))(}{)}{)}{))()()()((((((((((((}><{"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"paradoc": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/betaveros/paradoc",
		"name": "Paradoc",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hw"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"parenthetic": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cammckinnon/Parenthetic",
		"name": "Parenthetic",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "((()(()))((()(())(())())((())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()))((()(())(())())((())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()))((()(())(())())((())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()))((()(())(())())((())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()))((()(())(())())((())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()))((()(())(())())((())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()))((()(())(())())((())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()))((()(())(())())((())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()))((()(())(())())((())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()))((()(())(())())((())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()))((()(())(())())((())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()))((()(())(())())((())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()))((()(())(())())((())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()())))"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pari-gp": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://pari.math.u-bordeaux.fr/",
		"name": "Pari/GP",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print1(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"pascal-fpc": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://www.freepascal.org/",
		"name": "Pascal (FPC)",
		"prettify": "pascal",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "begin write('Hello, World!')end."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"path": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://sourceforge.net/projects/pathlang/",
		"name": "PATH",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "$\\\n//\n\\++++++++++++++++++++++++++++++++\\\n/++++++++++++++++++++++++++++++++/\n\\++++++++.\\\n/}        /\n\\++++++++++++++++++++++++++++++++\\\n/++++++++++++++++++++++++++++++++/\n\\++++++++++++++++++++++++++++++++\\\n/                                /\n\\+++++.+++++++..+++.\\\n/}                  /\n\\++++++++++++++++++++++++++++++++\\\n/                                /\n\\++++++++++++.------------.\\\n/{{                        /\n\\+++++++++++++++.\\\n/}               /\n\\.+++.------.--------.\\\n/}                    /\n\\+.\\\n/  /\n#"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"pbrain": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "http://www.parkscomputing.com/applications/pbrain/",
		"name": "pbrain",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++++++++++++++.------------.<<+++++++++++++++.>.+++.------.--------.>+.>."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"perl5": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.perl.org/",
		"name": "Perl 5",
		"prettify": "perl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\";"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"perl6": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/nxadm/rakudo-pkg",
		"name": "Perl 6",
		"prettify": "perl6",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "say \"Hello, World!\";"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"phoenix": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/senselogic/PHOENIX",
		"name": "Phoenix",
		"prettify": "php",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo \"Hello, World!\";"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"php": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://php.net/",
		"name": "PHP",
		"prettify": "php",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "<?php\necho \"Hello, World!\";\n?>"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"picolisp": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://picolisp.com/",
		"name": "PicoLisp",
		"prettify": "lisp",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(prinl \"Hello, World!\")(bye)"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"piet": {
		"categories": [
			"recreational"
		],
		"encoding": "xxd",
		"link": "https://github.com/gleitz/npiet",
		"name": "Piet",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "0000000: 47 49 46 38 37 61 1c 00 03 00 84 14 00 ff 00 00  GIF87a..........\n0000010: 00 00 00 ff c0 c0 ff 00 00 c0 00 00 ff ff c0 ff  ................\n0000020: ff 00 c0 c0 00 c0 ff c0 00 ff 00 00 c0 00 c0 ff  ................\n0000030: ff 00 ff ff 00 c0 c0 c0 c0 ff 00 00 ff 00 00 c0  ................\n0000040: ff c0 ff ff 00 ff c0 00 c0 ff ff ff ff ff ff ff  ................\n0000050: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff  ................\n0000060: ff ff ff ff ff ff ff ff ff ff ff ff ff 2c 00 00  .............,..\n0000070: 00 00 1c 00 03 00 00 05 3c e0 23 42 4a 73 24 c3  ........<.#BJs$.\n0000080: 23 39 ec 33 35 f0 02 39 d1 c2 3c 81 11 44 82 63  #9.35..9..<..D.c\n0000090: 2a 40 05 42 70 98 10 24 13 c1 44 f4 80 2c 17 0a  *@.Bp..$..D..,..\n00000a0: 43 21 32 a9 56 0f 0d 87 80 3a 39 20 1c 12 c3 20  C!2.V....:9 ...\n00000b0: 5c 28 17 72 21 00 3b                             \\(.r!.;"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pike": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://pike.lysator.liu.se/",
		"name": "Pike",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "int main()\n{\n  write(\"Hello, World!\");\n  return 0;\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pingpong": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/graue/esofiles/tree/master/pingpong",
		"name": "PingPong",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "1-$!dlroW$ $,olleH#/<\\0@\n                   \\./"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pip": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/dloscutoff/pip",
		"name": "Pip",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pl": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/quartata/pl-lang",
		"name": "pl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pony": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.ponylang.org/",
		"name": "Pony",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "actor Main\n  new create(env: Env) =>\n    env.out.print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"positron": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/alexander-liao/positron",
		"name": "Positron",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print@\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"postl": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/alexander-liao/postfix-lang",
		"name": "PostL",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"postscript-xpost": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/luser-dr00g/xpost",
		"name": "PostScript (xpost)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(Hello, World!) =\nquit"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"powershell": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/TioSetup/wiki/Powershell",
		"name": "PowerShell",
		"prettify": "powershell",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"powershell-core": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/PowerShell/PowerShell",
		"name": "PowerShell Core",
		"prettify": "powershell",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"prelude": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki/Prelude",
		"name": "Prelude",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "92480969393782833909095806(^+^+^^+++!)"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"premier": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/Premier",
		"name": "Premier",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\nHello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"preproc": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://gitlab.com/pavelb/Preproc",
		"name": "Preproc",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"prolog-ciao": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://ciao-lang.org",
		"name": "Prolog (Ciao)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "main :-\n     write('Hello, World!')."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "version"
	},
	"prolog-swi": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.swi-prolog.org",
		"name": "Prolog (SWI)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "?-write('Hello, World!')."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"proton": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/alexander-liao/proton",
		"name": "Proton",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"proton2": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/alexander-liao/proton-2.0",
		"name": "Proton 2.0",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"purple": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki/Purple",
		"name": "Purple",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "AA1AA1AA1bA1b1Bo1bb1bbibb1Bi1b     \n ! d l r o W   , o l l e H"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pushy": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/FTcode/Pushy",
		"name": "Pushy",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "`Hello, World!`\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pyke": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/muddyfish/PYKE",
		"name": "Pyke",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pylons": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/morganthrapp/Pylons-lang",
		"name": "Pylons",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"c"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pyon": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/alexander-liao/pyon",
		"name": "Pyon",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pyramid-scheme": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/Pyramid-Scheme",
		"name": "Pyramid Scheme",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "  ^      ^      ^     ^      ^      ^      ^      ^      ^      ^      ^      ^      ^\n / \\    / \\    / \\   / \\    / \\    / \\    / \\    / \\    / \\    / \\    / \\    / \\    / \\\n/out\\  /out\\  /out\\ /out\\  /out\\  /out\\  /out\\  /out\\  /out\\  /out\\  /out\\  /out\\  /out\\\n-----^ -----^ -----^----- ^----- ^----- ^----- ^----- ^----- ^----- ^----- ^----- ^-----\n    / \\    / \\    / \\    / \\    / \\    / \\    / \\    / \\    / \\    / \\    / \\    / \\\n   /chr\\  /chr\\  /chr\\  /chr\\  /chr\\  /chr\\  /chr\\  /chr\\  /chr\\  /chr\\  /chr\\  /chr\\\n  ^----- ^----- ^----- ^----- ^----- ^----- ^----- ^----- ^----- ^----- ^----- ^-----\n / \\    / \\    / \\    / \\    / \\    / \\    / \\    / \\    / \\    / \\    / \\    / \\\n/72 \\  /101\\  /108\\  /111\\  /44 \\  /32 \\  /87 \\  /111\\  /114\\  /108\\  /100\\  /33 \\\n-----  -----  -----  -----  -----  -----  -----  -----  -----  -----  -----  -----"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pyt": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/mudkip201/pyt",
		"name": "Pyt",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "89*9⁺²⁺Đ7+ĐĐ3+7²5-2⁵9²6+6²⁺3*Đ3+Đ6-9⁺²2⁵⁺áƇǰ"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pyth": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/isaacg1/pyth",
		"name": "Pyth",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"python1": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.python.org/download/releases/1.6.1/",
		"name": "Python 1",
		"prettify": "python",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"python2": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://docs.python.org/2/",
		"name": "Python 2",
		"prettify": "python",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"python2-cython": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://cython.org/",
		"name": "Python 2 (Cython)",
		"prettify": "python",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"python2-iron": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://ironpython.net",
		"name": "Python 2 (IronPython)",
		"prettify": "python",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"python2-jython": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.jython.org",
		"name": "Python 2 (Jython)",
		"prettify": "python",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"python2-pypy": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://pypy.org/",
		"name": "Python 2 (PyPy)",
		"prettify": "python",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"python3": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://docs.python.org/3/",
		"name": "Python 3",
		"prettify": "python",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"python3-cython": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://cython.org/",
		"name": "Python 3 (Cython)",
		"prettify": "python",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"qqq": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ararslan/qqq-lang",
		"name": "???",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ",;;..;...;.;,,,,;,,\"......\";...........-,'\",-.\";;,,,,!;...!;,!!...!;;;!-!-!-!...!,,,,,,!-,!;;;.!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"quadr": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/abrudz/QuadRS",
		"name": "QuadR",
		"prettify": "apl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"quadrefunge-97-mtfi": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/befunge-97-mtfi",
		"piggyback": "befunge-97-mtfi",
		"name": "Quadrefunge-97 (MTFI)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "q\"Hello, World!\"i#]:#,_@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"quads": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/abrudz/QuadRS",
		"name": "QuadS",
		"piggyback": "quadr",
		"prettify": "apl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"quintefunge-97-mtfi": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/befunge-97-mtfi",
		"piggyback": "befunge-97-mtfi",
		"name": "Quintefunge-97 (MTFI)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "q\"Hello, World!\"i#]:#,_@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"r": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.r-project.org/",
		"name": "R",
		"prettify": "r",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "cat(\"Hello, World!\");"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"racket": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://racket-lang.org/",
		"name": "Racket",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#lang racket/base\n(display \"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"rail": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://esolangs.org/wiki/Rail",
		"name": "Rail",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "$'main'\n -[Hello, World!]o#"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"random-brainfuck": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/brainfuck",
		"name": "Random Brainfuck",
		"piggyback": "brainfuck",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "+[?]--<-<<+[+[<+>--->->->-<<<]>]<<--.<++++++.<<-..<<.<+.>>.>>.<<<.+++.>>.>>-.<<<+."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"rapira": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/freeduke33/rerap2",
		"name": "Rapira",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "output: \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"reason": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://reasonml.github.io",
		"name": "Reason",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\" |> Js.log;"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "npm"
	},
	"recursiva": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/officialaimm/recursiva",
		"name": "Recursiva",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "P\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"red": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.red-lang.org",
		"name": "Red",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Red []\n\nprint \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"reng": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/Reng",
		"name": "Reng",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"rao;~"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"reregex": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TehFlaminTaco/ReRegex",
		"name": "ReRegex",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"reticular": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/reticular",
		"name": "Reticular",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"p;"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"retina": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/m-ender/retina/wiki/The-Language/a950ad7d925ec9316e3e2fb2cf5d49fd15d23e3d",
		"name": "Retina 0.8.2",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\nHello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"retina1": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/m-ender/retina/wiki/The-Language",
		"name": "Retina",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "K`Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"rexx": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.rexx.org/",
		"name": "Rexx (Regina)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "say \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "manual"
	},
	"rk": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://github.com/aaronryank/rk-lang",
		"name": "rk",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "rk:start\n    print: \"Hello, World!\"\nrk:end"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"roda": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/fergusq/roda",
		"name": "Röda",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "main{print\"Hello, World!\"}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "github-release"
	},
	"roop": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/alejandrocoria/ROOP",
		"name": "ROOP",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"\nh"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"rotor": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/quartata/rotor-lang",
		"name": "Rotor",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"rprogn": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TehFlaminTaco/Reverse-Programmer-Notation",
		"name": "RProgN",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"rprogn-2": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TehFlaminTaco/RProgN-2",
		"name": "RProgN 2",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"ruby": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.ruby-lang.org/",
		"name": "Ruby",
		"prettify": "ruby",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "puts 'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"rust": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.rust-lang.org/",
		"name": "Rust",
		"prettify": "rust",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "fn main() {\n\tprintln!(\"Hello, World!\");\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"sad-flak": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/Destructible-Watermelon/Sad-Flak",
		"name": "Sad-Flak",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "32\n({}≤()≥)\n(≤()≥)\n99\n({}≤()≥)\n((<>[≤()≥]))\n7\n({}≤()≥)\n((<>))≤()≥\n5\n({}≤()≥)\n(≤()≥)\n109\n({}≤()≥)\n(<>)(≤()≥)\n85\n({}≤()≥)\n(≤()≥)\n30\n({}≤()≥)\n(≤()≥)\n42\n({}≤()≥)\n({≤()≥})(({()}))({()})(())\n70\n({}≤()≥)\n≤≥"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-A"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"sakura": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/tuxcrafting/sakura",
		"name": "Sakura",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "H"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"sbf": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/KelsonBall/Esolangs.Sbf",
		"name": "Symbolic Brainfuck",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "▲²²²▲²²²¡½½½▲▲▲²▲²²▲¡½▲▲▲▲²¡¡▲▲▲¡α▲²²▲²▲²²¡ß▲²²²²²¡ß²▼¡α¡▲▲▲¡½▼▼▼²¡½½▼▼²²¡ß▲¡"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"scala": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.scala-lang.org/",
		"name": "Scala",
		"prettify": "scala",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "object Main extends App{print(\"Hello, World!\")}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"scheme-chez": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://cisco.github.io/ChezScheme/",
		"name": "Chez Scheme",
		"prettify": "scm",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(display \"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"scheme-chicken": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.call-cc.org/",
		"name": "CHICKEN Scheme",
		"prettify": "scm",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(display \"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"scheme-gambit": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "http://gambitscheme.org",
		"name": "Gambit Scheme (gsi)",
		"prettify": "scm",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(display \"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"scheme-guile": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.gnu.org/software/guile/",
		"name": "Guile",
		"prettify": "scm",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(display \"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"sed": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.gnu.org/software/sed/",
		"name": "sed 4.2.2",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "s/.*/Hello, World!/"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"sed-gnu": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.gnu.org/software/sed/",
		"name": "sed",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "s/.*/Hello, World!/"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"seed": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/seed",
		"name": "Seed",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "20 854872453003476740699221564322673731945828554947586276010721089172712854441839676581917455319274850944955030258951339804246125714958815519550291630078076933441706558540342671975808828643360922071900333028778314875248417953197990571991784126564752005357199892690656368640420204822142316716413192024742766282266114842280731756458212469988291309261528542889299297601723286769284159107438930448971911102280330101196758384815655479640836157495863547199726234352265518586460633795171196315255736880028338460236768181141732764911402112878175632130129852788301009582463631290071329795384336617491655825493435803011947670180368458659271192428341035912236946048939139042310380278430049252171822721598175984923434205610723412240162418996808671543770639111617709604242882388664919702606792443015941265168129550718541372361144081848761690730764968771245566074501485020726368378675085908872608679630368472956274468410052703615106090238423979678950131481176272880569100533049143775921798055136871254424261001442543122666701145111965968366507060931708140304772342855064834334129143038575569044150428480231956133612367393837580345180691911525531699573096952433882387811884727975431823620782822755161559988205401134640722220804177812794328129589949692446031008866917615922944976151073653201316255518389496411696741029209242119521978920200314572718584995265523235225587228975886710511855501710470163649632761488899317729943053884132314641377747687975638119132094777769497069556255954031537245957811105217875011509899497752696062748928963281605780942517262774976217663461063680912331030221981433051827519906741285738915397005702326447635845195923640649166530310494885569783989508000344280715868581532826832242144647203531393142251025361866506821695860883605004105862208004440476654027574832078603305884731766236740069411566854496824754558761536201352147934963241039597221404341132342297870517293237489233057335406510464277610336142382379135365550299895416613763920950687921780736585299310706573253951966294045814905727514141733220565108490291792987304210662448111170752411153136765318541264632854767660676223663544921028492602135525959428999005153729028491208277493747933069008199074925710651071766675870081314909460661981433426167330215548196538791617762566403934129026219366764038390123622134753742930729751695349588862441999672547791630729398908283091638866715502470152431589429837867944760012419885615525232399584379209285060418518373512154801760060312646951597932345591416241634668119867158079946680321131213357200382937049485606706114467095019612014749723443159443363662563254359712162432143334612180576945072905749883870150120687696027984317320305291407322779803583395375616762530641605634303022155218169343410634115050596030685041633824154135240376022159918501703555881290333205131375705406831260759974112248490451605422031345264183102048614606636275942039438138959188478277971377232005036301145411215067576576667743288951344423152531417111852584846747428443123174595987315325304540564683047858415059703724263652136185848573853965992798725654430360647040362341567082462847275277303225817689141675391972818943419663764371222973269129542760661385278009266471167618553065823580448848795731295589715602705860758954890415040763604082216728159486423396295188510311881004469017351709060492844398219491990895826924575575549615118821417543037296628825303328056839433114519945243963946989899508355224823109677424196639930153649890175062456649384605721510239142861693109687536600667811037619175927995599388547421689316110236566026931360164495251160997857372500940728057700473763884480342708897319990346726967220426504612260565552531158509215849649565188655100774748485416791517853427613458459889062942881409801879085054494129489535044719193283409051007851153504224002807392992520076910314763705776345053922387355156981872691537772657428096384535960466923475731297217863371650154415835785630016335858514130863258775100537612371430357576913148500310344278511588325852376442503898849856566716198848377379400158332792027967216204970114516984638014129252882482309132898416484525230488700253065644547798869056136044415413099076332059572505138116227535024546891015836838323022822272664771489129085797354578016574544759934333471793"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"septefunge-97-mtfi": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/befunge-97-mtfi",
		"piggyback": "befunge-97-mtfi",
		"name": "Septefunge-97 (MTFI)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "q\"Hello, World!\"i#]:#,_@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"seriously": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/Mego/Seriously/tree/v1",
		"name": "Seriously",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "H"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"sesos": {
		"categories": [
			"recreational"
		],
		"encoding": "it's complicated",
		"link": "https://github.com/DennisMitchell/sesos",
		"name": "Sesos",
		"prettify": "lisp",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "add 72\nput\nfwd 1\nadd 101\nput\nadd 7\nput\nput\nadd 3\nput\nfwd 1\nadd 44\nput\nsub 12\nput\nrwd 2\nadd 15\nput\nfwd 1\nput\nadd 3\nput\nsub 6\nput\nsub 8\nput\nfwd 1\nadd 1\nput"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"set": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/somebody1234/Set",
		"name": "Set",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "set ! H\nset ! 101\nset ! 108\nset ! 108\nset ! 111\nset ! 44\nset ! 32\nset ! W\nset ! 111\nset ! 114\nset ! 108\nset ! 100\nset ! 33"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"sexefunge-97-mtfi": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/befunge-97-mtfi",
		"piggyback": "befunge-97-mtfi",
		"name": "Sexefunge-97 (MTFI)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "q\"Hello, World!\"i#]:#,_@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"shapescript": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/DennisMitchell/shapescript",
		"name": "ShapeScript",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"shnap": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ShnapLang/Shnap",
		"name": "Shnap",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "println(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "github-release"
	},
	"shortc": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/aaronryank/shortC",
		"name": "shortC",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "AJ\"Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"shove": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/shove",
		"name": "Shove",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\" ,olleH\"V       v\n S\"!dlroW\"<"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"shp": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/ConorOBrien-Foxx/shp",
		"name": ";#+",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ";;;;;;;;;~++++++++>#<+++;;:>#<+-;;>#<#<-;;;>#<-+++++++;;;;-:>#<-+;;;#::<;;;-++#:<#<;;;#-<;;;#<+;;#-:<-+;;#"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"shtriped": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/HelkaHomba/shtriped",
		"name": "Shtriped",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "e n\ne b\ni b\n+ x y\n +\n  i x\n  d y\n  +\n +\n d x\n0\n + b b b\n1\n + b n n\n 0\nz x\n d x\n z x\nD\n 1\n s n\n z n n\n z b b\n i b\nY\n 0\n 0\nZ\n 1\n Y\n Y\nB\n 0\n 1\n1\nZ\n1\nY\n1\nY\nD\nB\nB\n1\n0\nZ\nY\nD\nB\n1\nY\nB\n0\nZ\nD\n1\nB\nB\nY\n1\n0\nD\nY\n1\n1\nY\nB\nZ\nD\nB\nY\n1\n0\nZ\nY\nD\nB\n1\n1\n1\n1\nB\n0\nD"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"silos": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/rjhunjhunwala/S.I.L.O.S",
		"name": "S.I.L.O.S",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"simplefunge": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/simplefunge",
		"name": "Simplefunge",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "89*O5!+!*1+O7+OO3+O&47*&-O34*&-O9!*6+O`&O3+O6&-O8&-O`1+O@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"simplestack": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/aaronryank/Implicit",
		"name": "Implicit",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "«Hello, World!»"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"simula": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://directory.fsf.org/wiki/Cim",
		"name": "Simula (cim)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Begin\n\tOutText (\"Hello, World!\");\n\tOutimage;\nEnd;"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"sisal": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/sisalc",
		"name": "SISAL",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "define main\n\nfunction main(returns array[character])\n\t\"Hello, World!\"\nend function"
						}
					}
				],
				"response": "\"Hello, World!\""
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"slashes": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki////",
		"name": "///",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"smbf": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://soulsphere.org/hacks/smbf/",
		"name": "Self-modifying Brainfuck",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "<[.<----------]\n+nv|ya*6yvvoH"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"sml-mlton": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.mlton.org/",
		"name": "Standard ML (MLton)",
		"prettify": "ml",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\";"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"snails": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/feresum/PMA",
		"name": "Snails",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\\p|\\P)z(\\a|\\A)z{\\n|\\N)z{\\a|\\A}z(\\m|\\M)z(\\a|\\A"
						}
					},
					{
						"command": "F",
						"payload": {
							".input.tio": "EmYPhNuy\nAaaKVsjL\nonlGviCw\nDdOgFrRn\nISeHZmqc\nzMUkBGJQ"
						}
					}
				],
				"response": "1"
			}
		},
		"update": "git"
	},
	"snobol4": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "http://www.snobol4.org/csnobol4/",
		"name": "SNOBOL4 (CSNOBOL4)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "BEGIN\n\tOUTPUT = 'Hello, World!'\nEND"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "manual"
	},
	"snowman": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "http://github.com/KeyboardFire/snowman-lang",
		"name": "Snowman",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(\"Hello, World!\"sP"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"snusp": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/snusp",
		"name": "SNUSP (Modular)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "      /@@@@++++#               #+++@@\\\n$@\\H.@/e.+++++++l.l.+++o.>>++++.< .<@/--------------------------------w.++++++++++++++++++++++++++++++++@\\o.+++r.++@\\l.@\\d.>+.@/.#\n  \\@@@@=>++++>+++++<<@+++++#                                                                       #---@@/!=========/!==/"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"snuspi": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/graue/esofiles/tree/master/snusp",
		"name": "SNUSP (Snuspi)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "72+.29+.7+..3+.67-.12-.55+.24+.3+.6-.8-.67-.#"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"somme": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/Somme",
		"name": "Somme",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "8s+vi:7+::J:^B4*25p9s6+v:J:6-:8-25pim,"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"spaced": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/spaced",
		"name": "Spaced",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(q=\"Helo, Wrd!\")[1]+q[3]+q[5]+q[5]+q[7]+q[9]+q[9+2]+q[9+4]+q[7]+q[9+6]+q[5]+q[9+8]+q[9+9+1]"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"spim": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/spim",
		"name": "Assembly (MIPS, SPIM)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\t.data\nmsg:\n\t.asciiz \"Hello, World!\"\n\n\n\t.text\nmain:\n\tli $v0, 4\n\tla $a0, msg\n\tsyscall\n\tli $v0, 10\n\tsyscall"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"spl": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/spl",
		"name": "Shakespeare Programming Language",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "The Infamous Hello World Program.\n\nRomeo, a young man with a remarkable patience.\nJuliet, a likewise young woman of remarkable grace.\nOphelia, a remarkable woman much in dispute with Hamlet.\nHamlet, the flatterer of Andersen Insulting A/S.\n\n\n                    Act I: Hamlet's insults and flattery.\n\n                    Scene I: The insulting of Romeo.\n\n[Enter Hamlet and Romeo]\n\nHamlet:\n You lying stupid fatherless big smelly half-witted coward!\n You are as stupid as the difference between a handsome rich brave\n hero and thyself! Speak your mind!\n\n You are as brave as the sum of your fat little stuffed misused dusty\n old rotten codpiece and a beautiful fair warm peaceful sunny summer's\n day. You are as healthy as the difference between the sum of the\n sweetest reddest rose and my father and yourself! Speak your mind!\n\n You are as cowardly as the sum of yourself and the difference\n between a big mighty proud kingdom and a horse. Speak your mind.\n\n Speak your mind!\n\n[Exit Romeo]\n\n                    Scene II: The praising of Juliet.\n\n[Enter Juliet]\n\nHamlet:\n Thou art as sweet as the sum of the sum of Romeo and his horse and his\n black cat! Speak thy mind!\n\n[Exit Juliet]\n\n                    Scene III: The praising of Ophelia.\n\n[Enter Ophelia]\n\nHamlet:\n Thou art as lovely as the product of a large rural town and my amazing\n bottomless embroidered purse. Speak thy mind!\n\n Thou art as loving as the product of the bluest clearest sweetest sky\n and the sum of a squirrel and a white horse. Thou art as beautiful as\n the difference between Juliet and thyself. Speak thy mind!\n\n[Exeunt Ophelia and Hamlet]\n\n\n                    Act II: Behind Hamlet's back.\n\n                    Scene I: Romeo and Juliet's conversation.\n\n[Enter Romeo and Juliet]\n\nRomeo:\n Speak your mind. You are as worried as the sum of yourself and the\n difference between my small smooth hamster and my nose. Speak your\n mind!\n\nJuliet:\n Speak YOUR mind! You are as bad as Hamlet! You are as small as the\n difference between the square of the difference between my little pony\n and your big hairy hound and the cube of your sorry little\n codpiece. Speak your mind!\n\n[Exit Romeo]\n\n                    Scene II: Juliet and Ophelia's conversation.\n\n[Enter Ophelia]\n\nJuliet:\n Thou art as good as the quotient between Romeo and the sum of a small\n furry animal and a leech. Speak your mind!\n\nOphelia:\n Thou art as disgusting as the quotient between Romeo and twice the\n difference between a mistletoe and an oozing infected blister! Speak\n your mind!\n\n[Exeunt]"
						}
					}
				],
				"response": "Hello World!"
			}
		},
		"update": "git"
	},
	"sqlite": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.sqlite.org/",
		"name": "SQLite",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "select 'Hello, World!';"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"squirrel": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.squirrel-lang.org/",
		"name": "Squirrel",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\");"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"stackcats": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/m-ender/stackcats",
		"name": "Stack Cats",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "-*(:^-_-_:-_:-_:-_:-_-_:[:^]]:^!-*!->[!_>[!_>[{]>[^-_-_:]]<<<}>[!-:^[[\\\\>]:^[[>:[>:^[<<]]\\\\>[*>+:^:-_]:^[[-_*[>>>[-_[/<]>+^[>[<<]]*>[)"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-l"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"stacked": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/stacked",
		"name": "Stacked",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "'Hello, World!' out"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"starry": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki/Starry",
		"name": "Starry",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "        + + +* +  * + + +* + .* +         + +* * +      +* .  + + . + . +        + +   +* + . +          +   * +* + .         + +  * +* . +*      + * . + .* . . .  + * ."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"stencil": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/abrudz/Stencil",
		"name": "Stencil",
		"prettify": "apl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "S"
						}
					},
					{
						"command": "F",
						"payload": {
							".input.tio": "Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"stones": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cheezgi/stones",
		"name": "Stones",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "red down three\nred up three\nyellow up\nblue left\n\nred down three\nred down one\nyellow down\nred down three\nred down one\nyellow down\nyellow up\ngreen down\ngreen down\ngreen down\ngreen down\ngreen down\n\nred down one\nyellow down\nblue left\n\nred up three\nyellow down\ngreen down\ngreen down\nblue left\nblue left\n\nblue right\nred down one\nred down one\nred down three\nyellow down\nyellow down\nyellow down\ngreen down\nblue left\n\nred right one\ngreen up\n\nred left one\nred down three\nyellow down\nred up two\nyellow up\nblue left\n\ngreen down\ngreen down\norange down two\ngreen left\n\nblue right\nred up three\nred up two\nyellow up\nblue left\n\nred down two\nred up two\nyellow up\nred down one\nblue right\nyellow left\nyellow down\nblue left\n\nred left one\ngreen up\nred left one\ngreen up\nblue left\n\nblue right\nred right two\nred right two\nyellow down\nyellow down\nblue left\n\nblue left\n\nblue left\n\nred right one\ngreen left\nred up three\nred up two\nyellow up\nred down one\nyellow down\nblue left"
						}
					}
				],
				"response": "Hello, world!"
			}
		},
		"update": "git"
	},
	"str": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/str",
		"name": "str",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "`Hello, World!`o;"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"straw": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/tuxcrafting/straw",
		"name": "Straw",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "->"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"subskin": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/subskin",
		"name": "Subskin",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "2\n48\n18\na\n1\n2\n4\n2\na\n6\n0\n100\na\n21\n64\n6c\n72\n6f\n77\n20\n2c\n6f\n6c\n6c\n65"
						}
					}
				],
				"response": "Hello, world!"
			}
		},
		"update": "git"
	},
	"surface": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/surface",
		"name": "Surface",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "++++++++(-v        .     o]v    \n   -      e++++v   !     ^ v    \n   -           e+++++++++^ x    \n   -     e+++++++++o   v-(e.    \n   -     e+++++++++o   +  ^o    \n   -               +v]ev        \n   e----------o    +- ^+        \n   e----------o    +- ^o        \n+++.v              +e-.+++++++..\n-.^!+              +e-----------\n  oo+              +.e+.@       \n.--o+              .+v .--------\n   -+              ++           \n   -+              ++           \n   -+              ++           \n   -+              .+"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"swap": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/splcurran/Swap",
		"name": "Swap",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"!dlroW ,olleH\"ooooooooooooox"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"swift4": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://developer.apple.com/swift/",
		"name": "Swift 4",
		"prettify": "swift",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"syms": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/CatsAreFluffy/syms",
		"name": "Syms",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "{Hello, World!}>"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"symbolic-python": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/FTcode/Symbolic-Python",
		"name": "Symbolic Python",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "___=`_`[_==_]\n_=_!=_\n__=`_`[-~(_==_)]\n_=_==_\n____='%'+`'¬'`[-_-_]\n____=____+`_`[-_]+__*-~_+___+', '+____+___+`_`[_]+__\n_+=_\n__=_+_**-~_\n___=__**_\n____+=____[:_]%(___)+'!'\n_=_*_*_-([]==[])\n_=____%(-~-~(_*__),-~_*__+_)"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"taco": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TehFlaminTaco/TacO",
		"name": "TacO",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "@\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"tampio": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/fergusq/tampio/tree/functional",
		"name": "Tampio (functional)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "tulos on HelloWorld"
						}
					}
				],
				"response": "HelloWorld"
			}
		},
		"update": "git"
	},
	"tampioi": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/fergusq/tampio",
		"name": "Tampio (imperative)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Kun aloitetaan, tulostetaan teksti \"Hello, World!\"."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"taxi": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://bigzaphod.github.io/Taxi/",
		"name": "Taxi",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\" is waiting at the Writer's Depot.\nGo to Writer's Depot: west 1st left, 2nd right, 1st left, 2nd left.\nPickup a passenger going to the Post Office.\nGo to the Post Office: north 1st right, 2nd right, 1st left.\nGo to the Taxi Garage: north 1st right, 1st left, 1st right."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"tcl": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://tcl.tk/",
		"name": "Tcl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "puts Hello,\\ World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"tcsh": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.tcsh.org/",
		"name": "tcsh",
		"prettify": "sh",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo 'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"templates": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/feresum/tmp-lang",
		"name": "Templates Considered Harmful",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "St<72,'e','l','l','o',44,32,87,'o',114,'l','d',33>"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"threead": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TehFlaminTaco/Threead",
		"name": "Threead",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"o"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"thue": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://esolangs.org/wiki/Thue",
		"name": "Thue",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "a::=~Hello, World!\n::=\na\n"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"thutu": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki/Thutu",
		"name": "Thutu",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "/^=1$/Hello, World!=n=x=9/"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"tincan": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/tincan",
		"name": "TinCan",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#  -72, Z, -1                          #\n# -101, Y, -1                          #\n# -108, X, -1                          #\n# -108, W, -1                          #\n# -111, V, -1                          #\n#  -44, U, -1                          #\n#  -32, T, -1                          #\n#  -87, S, -1                          #\n# -111, R, -1                          #\n# -114, Q, -1                          #\n# -108, P, -1                          #\n# -100, O, -1                          #\n#  -33, N, -1                          #"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"tinybf": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/brainfuck",
		"name": "tinyBF",
		"piggyback": "brainfuck",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "=++>+>>=+|+|=>+=>+++>+>+>+=>>>|=>=|>>++==>=++++++===>>+====>>==>=+==>>==>>===>>>===+++==>>==>>=+==>>>=+=="
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"tinylisp": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/dloscutoff/Esolangs/tree/master/tinylisp",
		"name": "tinylisp",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(load library)\n(join (q (Hello, World!)) spc)"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"transcript": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://web.archive.org/web/20071018030927/http://www.corknut.org/code/transcript/",
		"name": "TRANSCRIPT",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "He is here.\n>HE, Hello, World!\n>X HE"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"trefunge-97-mtfi": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/befunge-97-mtfi",
		"piggyback": "befunge-97-mtfi",
		"name": "Trefunge-97 (MTFI)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "q\"Hello, World!\"i#]:#,_@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"trefunge-98-pyfunge": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://pythonhosted.org/PyFunge/",
		"name": "Trefunge-98 (PyFunge)",
		"piggyback": "befunge-98-pyfunge",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"9!dlroW ,olleH\"ck,@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"triangular": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/aaronryank/triangular",
		"name": "Triangular",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\\@~/;<"
						}
					},
					{
						"command": "F",
						"payload": {
							".input.tio": "Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"triangularity": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Mr-Xcoder/Triangularity",
		"name": "Triangularity",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ".... ....\n...\"!\"...\n..\"rld\"..\n.\"o, Wo\".\n\"Hell\"+++"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"trigger": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "http://yiap.nfshost.com/esoteric/trigger/trigger.html",
		"name": "Trigger",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "HHHeeelll#lllooo,,,   WWWooorrrlllddd!!!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"trumpscript": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/samshadwell/TrumpScript",
		"name": "TrumpScript",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "say \"Hello, World!\"\nAmerica is great."
						}
					}
				],
				"response": "hello, world!"
			}
		},
		"update": "git"
	},
	"turtled": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Destructible-Watermelon/Turtl-d",
		"name": "Turtlèd",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"typescript": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.typescriptlang.org",
		"name": "TypeScript",
		"prettify": "javascript",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "console.log('Hello, World!')"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "npm"
	},
	"ubasic": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://github.com/EtchedPixels/ubasic",
		"name": "uBASIC",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "10 PRINT \"Hello, World!\"\n"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"underload": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/catseye/stringie",
		"name": "Underload",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(Hello, World!)S"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"unefunge-97-mtfi": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/befunge-97-mtfi",
		"piggyback": "befunge-97-mtfi",
		"name": "Unefunge-97 (MTFI)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"!dlroW ,olleH\">:#,_@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"unefunge-98-pyfunge": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://pythonhosted.org/PyFunge/",
		"name": "Unefunge-98 (PyFunge)",
		"piggyback": "befunge-98-pyfunge",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"9!dlroW ,olleH\"ck,@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"unicat": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/gemdude46/unicat",
		"name": "Unicat",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "😻😹😸🙀🙀😹😹😸🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😼😽🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😽😼🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😽😼🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😽😿🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😽😼🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😼😸🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😺😿🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😽😿🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😾😺🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😽😼🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😼😼🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😼😹🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😺🙀🙀😽😼😸🙀🙀🙀🙀"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"unlambda": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "http://www.madore.org/~david/programs/unlambda/",
		"name": "Unlambda",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "`.!`.d`.l`.r``.W`. `.,``.l`c`.H.e.oi"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"unreadable": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki/Unreadable",
		"name": "Unreadable",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "'\"'\"\"'\"\"'\"\"'\"'\"'\"\"\"\"\"\"'\"\"'\"\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"'\"\"'\"\"\"\"\"\"'\"\"'\"\"'\"\"'\"\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"\"\"\"\"'\"\"'\"\"'\"\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"\"\"\"\"'\"\"\"\"\"\"\"\"'\"\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"\"\"\"\"'\"\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"\"'\"'\"\"\"\"\"\"\"'\"\"\"\"\"\"\"\"'\"\"\"'\"'\"\"\"\"\"\"\"'\"\"\"'\"'\"\"\"\"\"\"\"'\"\"'\"\"'\"\"\"'\"'\"\"'\"\"'\"\"'\"'\"\"'\"\"'\"\"'\"\"\"\"\"\"\"'\"\"'\"\"\"'\"'\"\"\"\"\"\"\"'\"\"'\"\"\"'\"'\"\"\"\"\"\"\"'\"\"'\"\"'\"\"'\"\"\"'\"'\"\"'\"\"\"\"\"\"\"'\"\"\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"v": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/DJMcMayhem/V",
		"name": "V",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "cGHello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"v-fmota": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/v-fmota",
		"name": "\\/",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\\/>>>\\/\\\\/>\\/\\\\/>\\/\\\\>\\>\\\\>\\[/\\/>>>>\\[/\\/\\>>>\\[/\\/\\>>>>\\\\/>>\\/\\>>>/\\//\\//>\\/\\]/\\//>\\/\\]/\\//\\/>>>\\]/\\/\\\\\\\\./\\/\\\\/>>\\/\\\\/>\\/\\./\\/\\\\./\\/\\./\\/>\\>>>>\\>>>\\./\\/>\\\\/>>\\/\\\\[/\\/\\\\/>\\/\\./\\//\\//\\/\\]/\\/"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"vala": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://wiki.gnome.org/Projects/Vala",
		"name": "Vala",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "public static int main(string[] args) {\n\tstdout.printf(\"Hello, World!\\n\");\n\treturn 0;\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"vb-core": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.microsoft.com/net/core/platform",
		"name": "Visual Basic .NET (.NET Core)",
		"prettify": "vb",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Module Hello\n\tSub Main()\n\t\tConsole.WriteLine(\"Hello, World!\")\n\tEnd Sub\nEnd Module"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"verbosity": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cairdcoinheringaahing/Verbosity",
		"name": "Verbosity",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Include<Integer>\nInclude<MetaFunctions>\nInclude<Output>\nInclude<String>\n\nInteger:DefineVariable<IntegerOne; 1>\nOutput:DefineVariable<STDOUTfile; 0>\nString:DefineVariable<OutputString; \"Hello, World!\">\n\nString:RedefineVariable<OutputString; String:RemoveCharactersFromStart<OutputString; IntegerOne>>\nString:RedefineVariable<OutputString; String:TakeFirstCharacters<OutputString; IntegerOne>>\n\nOutput:DisplayAsText<STDOUTfile; OutputString>\n\nDefineMain<> [\n    MetaFunctions:ExecuteScript<MetaFunctions@FILE>\n]"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"visual-basic-net-mono": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.mono-project.com/docs/about-mono/languages/visualbasic/",
		"name": "Visual Basic .NET (Mono)",
		"prettify": "vb",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Module Hello\n\tSub Main()\n\t\tConsole.WriteLine(\"Hello, World!\")\n\tEnd Sub\nEnd Module"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"vitsy": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/VTCAKAVSMoACE/Vitsy",
		"name": "Vitsy",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"!dlroW ,olleH\"Z"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"whirl": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://bigzaphod.github.io/Whirl/",
		"name": "Whirl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "110011100111000001111100000001000011111000011111100000000010\n000011001111100001100010000010011111000100000000000001001111\n100000111110001000000000000000001000111110010000001100001111\n100011000000000100111110011100111000111000001000111000001111\n100000111110010000011111000110011111100001111000001111000001\n110011111100001111000110011100000111000100011111000001111100\n100000110000000111000001110001111100011111000111000001000001\n000011000111110001000001000000011100000111001000111110001111\n000001111000011111100001111110000011110000000000000000011110\n000011100111000011110011111000111110001111100000100000000000\n000000000000111110001110000001110000011100011100111110001000\n100000000011100001111100110000000010011111000111100000111100\n111100010011100000111110000011111001100111100010001111000000\n000001000111110010000010011110011001110001000111110001100000\n100011111000011110011100111111000111100000111100011111000000\n011110000011100100001111000100011111001100011111000111100000\n111001110001100111100100000000000000011111000001111100010010\n000011100001111100100000100011100000111000110011110001001111\n110001100000111100011111000111100000111001000011110001001111\n100000111110000000011110000011110000000000000000111000001110\n000011000001100000111000111000001100111110000111111001001110\n000011111000001100011000001001111110000011100110011111000000\n000111000001110000111100001100"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"whispers": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cairdcoinheringaahing/Whispers",
		"name": "Whispers",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "> \"Hello, World!\"\n>> Output 1"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"whitespace": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://web.archive.org/web/20150618184706/http://compsoc.dur.ac.uk/whitespace/tutorial.php",
		"name": "Whitespace",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "   \n  \t\t  \t \t \n  \t\t\t\t\n   \t\n   \t\t\t\n   \t  \n  \t\t \t  \n  \t\t  \t \t\t\n  \t\t\t\t\t\t\t\n   \t  \n   \t\n \n   \t\t\t \n  \t\t   \t\t\n\n  \n \n \n\t \t\n   \t\t \t \t\t\n\t   \t\n  \n \n\n\n  \t\n\n\n\n"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"width": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/stestoltz/Width",
		"name": "Width",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "GZiwWOwQROWIkilBAQWmkOCDmifGww"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"wierd": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/catseye/Wierd",
		"name": "Wierd (John's)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "-*********************         !dlroW ,olleH\n *                  *\n R*     *    *     *\n E *   **    **   *\n T  *  **    **  *\n U   ***  ****  ****\n R     *  *  *      *\n N    *    *  ********\n      *  ****\n 0     **"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"wise": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Wheatwizard/Wise",
		"name": "Wise",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "~-<<<~-<<<::^~-<~-<<<~-<<~-:::^~-<<<~-^::?:>~-<~-:?::^~-<<~-<~-<<::^~-<<<<<:<::^<~-<<~-<~-<~-|!::^~-<~-<~-<<<~-<!:::^~-<<<^::^~-<<<<<~-"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-a"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"woefully": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Destructible-Watermelon/Woefully",
		"name": "Woefully",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "||||||||||| ||\n|||||||||| |||\n||||||||| ||||\n|||||||| |||||\n||||||| ||||||\n|||||| |||||||\n||||| ||||||||\n||||| ||||||||\n||||| ||||||||\n||||| ||||||||\n||||| ||||||||\n||||| ||||||||\n|||| |||||||||\n|||| |||||||||\n|||| |||||||||\n|||| |||||||||\n|||| |||||||||\n|||| |||||||||\n||| ||||||||||\n||| ||||||||||\n||| ||||||||||\n||| ||||||||||\n||| ||||||||||\n|| |||||||||||\n|| |||||||||||\n|| |||||||||||\n|| |||||||||||\n|| |||||||||||\n||| ||||||||||\n|||| |||||||||\n||||| ||||||||\n|||||| |||||||\n||||||| ||||||\n|||||||| |||||\n||||||| ||||||\n|||||||| |||||\n||||||||| ||||\n|||||||||| |||\n||||||||||| ||\n|||||||||||| |\n||||||||||| ||"
						}
					}
				],
				"response": "@"
			}
		},
		"update": "git"
	},
	"wsf": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/dkudriavtsev/wsf",
		"name": "wsf",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": " \t \t \t \n \t \n \t \n \n   \n   \n \n  \n         \n  \n      \n  \n         \n \t \t \n      \t \t \t  \t\n\t\t  \t\n\t\t       \n\t \n \n \n\t\t \n \t \t \n \t\t\t \n\t\t\t\t   \n         \n      \t\t   \n \t \t \n\n  \n \t\t\t\t \t \n\t"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"wumpus": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/m-ender/wumpus",
		"name": "Wumpus",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"!dlroW ,olleH\"l&o@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"xeec": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "http://paulo-jorente.de/poncho/esolang/xEec/",
		"name": "xEec",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "h#10 h$! h$d h$l h$r h$o h$W h#32 h$, h$o h$l h$l h$e h$H >o o$ p jno"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"xeraph": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/xeraph",
		"name": "xeraph",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "l?$.\n~!dlroW ,olleH"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"yaball": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/yaball",
		"name": "YABALL",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.+++++++++++++++++++++++++++++.+++++++..+++.-------------------------------------------------------------------.------------.+++++++++++++++++++++++++++++++++++++++++++++++++++++++.++++++++++++++++++++++++.+++.------.--------.-------------------------------------------------------------------.>@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"yabasic": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.yabasic.de",
		"name": "Yabasic",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"yash": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://yash.osdn.jp",
		"name": "yash",
		"prettify": "sh",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"yup": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/yup",
		"name": "yup",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "0e00e-0e00e----|00e00e--|00e00e00e----|00e00e00e----|--e|--e|--e@0e0e00e--00e00e----|00e00e00e--|00e00e--|--e--|--e|000e-0e00e--00e00e-----|--e-@0e00e-0e00e----|00e00e00e----|00e00e00e----|00e00e00e----|--e|--e|--e:@@0e00e00e----|00e00e00e----|--e|00e00e--00e00e----|00e00e00e----|--e|--e00e-0e-0e--@0e00e-0e00e----|00e00e00e----|00e00e00e----|--e00e-0e--|--e@0e00e-0e00e----|00e00e--|00e00e--00e00e----|--e|--e:@00e-0e-0e-|00e0e00e00e--|00e00e--|--e--|00e00e--00e00e--|00e00e--|--e--|--e-|--e@0e00e00e----|00e00e00e----|--e|00e00e--00e00e----|00e00e00e----|--e|--e00e-0e-0e--@0e00e--|00e00e00e----|--e|00e00e--00e00e----|00e00e00e--|00e00e--|--e--|--e0e-|--e@0e00e-0e00e----|00e00e00e----|00e00e00e----|00e00e00e----|--e|--e|--e@0e00e-0e00e----|00e00e00e--00e00e------|00e00e00e--00e00e------|--e|--e@00e--@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"zephyr": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/dloscutoff/zephyr",
		"name": "Zephyr",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"zkl": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.zenkinetic.com/zkl.html",
		"name": "zkl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "manual"
	},
	"zsh": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.zsh.org/",
		"name": "Zsh",
		"prettify": "sh",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	}
}
